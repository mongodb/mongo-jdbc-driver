stepback: true
command_type: system

pre:
  - func: "fetch source"
  - func: "export variables"

post:
  - func: "upload jar file"
  - func: "upload test classes"
  - func: "upload test packages"
  - func: "upload test js"
  - func: "upload test css"
  - func: "upload test index"
  - func: "upload xunit test results"

buildvariants:
  - name: ubuntu1804-64-jdk-8
    display_name: Ubuntu 18.04 jdk-8
    expansions:
      _platform: ubuntu1804-64-jdk-8
    run_on: ubuntu1804-build
    tasks:
      - name: "build"
  - name: ubuntu1804-64-jdk-11
    display_name: Ubuntu 18.04 jdk-11
    expansions:
      _platform: ubuntu1804-64-jdk-11
    run_on: ubuntu1804-build
    tasks:
      - name: "build"
  - name: release
    display_name: "Release"
    expansions:
      _platform: ubuntu1804-64-jdk-8
    run_on: ubuntu1804-build
    tasks:
      - name: "publish-maven"

tasks:
  - name: "build"
    commands:
      - func: "build jdbc driver"

  - name: "publish-maven"
    commands:
      - func: "publish maven"

functions:
  "build jdbc driver":
    command: shell.exec
    type: test
    params:
      working_dir: adl-jdbc-driver
      script: |
          ${PREPARE_SHELL}
          # this also runs the unit tests.
          ./gradlew clean build

  "export variables":
    - command: shell.exec
      params:
        working_dir: adl-jdbc-driver
        script: |

          # set the state needed irrespective of _platform
          ARTIFACTS_DIR=artifacts
          S3_ARTIFACTS_DIR='adl-sql-driver/artifacts/${version_id}/${build_variant}'
          S3_RELEASES_DIR='adl-sql-driver/releases/${version_id}/${build_variant}'

          # get the version from the gradle.properties file, so we don't need to update in two places.
          MDBJDBC_VER="$(cat "gradle.properties" | head -n 1 | sed  s'/version\s*=\s*//')"

          case '${_platform}' in
          ubuntu1804-64-jdk-8)
               JAVA_HOME=/opt/java/jdk8
          ;;
          ubuntu1804-64-jdk-11)
               JAVA_HOME=/opt/java/jdk11
          ;;
          *)
               echo "ERROR: invalid value for \${_platform}: '$_platform'"
               echo "Allowed values: 'ubuntu1604-64-jdk-8', 'ubuntu1604-64-jdk-11'"
               exit 1
          ;;
          esac

          # export any environment variables that will be needed by subprocesses
          export PROJECT_DIRECTORY="$(pwd)"
          # dump env, but redact S3_KEY and S3_SECRET.
          echo '****************************ENV******************************'
          env | sed 's/S3_SECRET=.*$/REDACTED/' | sed 's/S3_KEY=.*$/REDACTED/'
          echo '*************************************************************'

          # create expansions from values calculated above
          mkdir -p $ARTIFACTS_DIR
          cat <<EOT > $ARTIFACTS_DIR/expansions.yml
          S3_ARTIFACTS_DIR: "$S3_ARTIFACTS_DIR"
          S3_RELEASES_DIR: "$S3_RELEASES_DIR"
          MDBJDBC_VER: "$MDBJDBC_VER"
          JAVA_HOME: "$JAVA_HOME"
          PREPARE_SHELL: |
            export ADL_TEST_USER=${adl_test_user}
            export ADL_TEST_PWD=${adl_test_pwd}
            export ADL_TEST_HOST=${adl_test_host}
            export ADL_TEST_AUTH_DB=${adl_test_auth_db}
            export JAVA_HOME=${JAVA_HOME}
            export PROJECT_DIRECTORY=${PROJECT_DIRECTORY}
          EOT

    - command: expansions.update
      params:
        file: adl-jdbc-driver/artifacts/expansions.yml

  "fetch jdbc files":
    - command: s3.get
      params:
        working_dir: adl-jdbc-driver
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: adl-jdbc-driver/build/libs/mongodb-jdbc-${MDBJDBC_VER}.jar
        remote_file: ${S3_ARTIFACTS_DIR}/mongodb-jdbc-${MDBJDBC_VER}.jar
        bucket: mciuploads

  "fetch source":
    - command: shell.exec
      params:
        silent: true
        script: |
          rm -rf adl-jdbc-driver
    - command: git.get_project
      params:
        directory: adl-jdbc-driver

  "upload test classes":
    - command: s3.put
      params:
        silent: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
            - adl-jdbc-driver/build/reports/tests/test/classes/*.html
        remote_file: ${S3_ARTIFACTS_DIR}/classes/
        content_type: text/html
        bucket: mciuploads
        permissions: public-read
        display_name: "Test Classes"
        visibility: none

  "upload test packages":
    - command: s3.put
      params:
        silent: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
            - adl-jdbc-driver/build/reports/tests/test/packages/*.html
        remote_file: ${S3_ARTIFACTS_DIR}/packages/
        content_type: text/html
        bucket: mciuploads
        permissions: public-read
        display_name: "Test Packages"
        visibility: none

  "upload test index":
    - command: s3.put
      params:
        silent: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: adl-jdbc-driver/build/reports/tests/test/index.html
        remote_file: ${S3_ARTIFACTS_DIR}/index.html
        content_type: text/html
        bucket: mciuploads
        permissions: public-read
        display_name: "Test Results"

  "upload test css":
    - command: s3.put
      params:
        silent: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
            - adl-jdbc-driver/build/reports/tests/test/css/*.css
        remote_file: ${S3_ARTIFACTS_DIR}/css/
        content_type: text/css
        bucket: mciuploads
        permissions: public-read
        display_name: "Test CSS"
        visibility: none

  "upload test js":
    - command: s3.put
      params:
        silent: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
            - adl-jdbc-driver/build/reports/tests/test/js/*.js
        remote_file: ${S3_ARTIFACTS_DIR}/js/
        content_type: application/javascript
        bucket: mciuploads
        permissions: public-read
        display_name: "Test JS"
        visibility: none

  "upload xunit test results":
    - command: attach.xunit_results
      params:
        silent: true
        file: adl-jdbc-driver/build/test-results/*/TEST-*.xml

  "upload jar file":
    - command: s3.put
      params:
        silent: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: adl-jdbc-driver/build/libs/mongodb-jdbc-${MDBJDBC_VER}.jar
        remote_file: ${S3_ARTIFACTS_DIR}/mongodb-jdbc-${MDBJDBC_VER}.jar
        content_type: application/java-archive
        bucket: mciuploads
        permissions: public-read
        display_name: "JDBC Driver (.jar)"

  "publish maven":
    - command: shell.exec
      type: test
      params:
        working_dir: adl-jdbc-driver
        script: |
          PROJECT_DIRECTORY="$(pwd)" NEXUS_USERNAME=${NEXUS_USERNAME} NEXUS_PASSWORD=${NEXUS_PASSWORD} NEXUS_URL=${NEXUS_URL} SIGNING_PASSWORD=${SIGNING_PASSWORD} SIGNING_KEY_ID=${SIGNING_KEY_ID} RING_FILE_GPG_BASE64=${RING_FILE_GPG_BASE64} ./gradle/publish.sh
