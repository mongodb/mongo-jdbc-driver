stepback: true
command_type: system

pre:
  - func: "fetch source"
  - func: "export variables"


buildvariants:

  - name: static-analysis
    display_name: "Static Analysis"
    run_on: [ ubuntu2204-small ]
    tasks:
      - spotless

  - name: release
    display_name: "Release"
    expansions:
      _platform: ubuntu2204-64-jdk-8
    run_on: ubuntu2204-small
    tasks:
      - name: "release-smoke"

tasks:

  - name: spotless
    commands:
      - func: "check spotless"

  - name: "release-smoke"
    #git_tag_only: true
    depends_on:
      - name: "spotless"
        variant: "static-analysis"
    commands:
      - func: "update download center feed"

functions:

  "check spotless":
    command: shell.exec
    type: test
    params:
      working_dir: mongo-jdbc-driver
      script: |
        ${PREPARE_SHELL}
        echo "-------- ENV spotless -------"
        echo "$(env)"
        echo "------------------------------"
        echo "MDBJDBC_VER : ${MDBJDBC_VER}"
        ./gradlew spotlessCheck


  "export variables":
    - command: shell.exec
      params:
        shell: bash
        silent: false
        working_dir: mongo-jdbc-driver
        script: |
          # set the state needed irrespective of _platform
          ARTIFACTS_DIR=artifacts
          S3_ARTIFACTS_DIR='mongo-jdbc-driver/artifacts/${version_id}/${build_variant}'

          # get the version from the gradle.properties file, so we don't need to update in two places.
          if [ "${triggered_by_git_tag}" != "" ]; then
            export MDBJDBC_VER=$(echo ${triggered_by_git_tag} | sed s/v//)
          else
            export MDBJDBC_VER=snapshot
          fi
          echo "MDBJDBC_VER = $MDBJDBC_VER"

          case '${_platform}' in
          ubuntu2204-64-jdk-8)
               JAVA_HOME=/opt/java/jdk8
          ;;
          ubuntu2204-64-jdk-11)
               JAVA_HOME=/opt/java/jdk11
          ;;
          *)
               echo "ERROR: invalid value for \${_platform}: '$_platform'"
               echo "Allowed values: 'ubuntu2204-64-jdk-8', 'ubuntu2204-64-jdk-11'"
               exit 1
          ;;
          esac

          # export any environment variables that will be needed by subprocesses
          export PROJECT_DIRECTORY="$(pwd)"

          # create expansions from values calculated above
          mkdir -p $ARTIFACTS_DIR
          cat <<EOT > $ARTIFACTS_DIR/expansions.yml
          S3_ARTIFACTS_DIR: "$S3_ARTIFACTS_DIR"
          MDBJDBC_VER: "$MDBJDBC_VER"
          JAVA_HOME: "$JAVA_HOME"
          PREPARE_SHELL: |
            export ADF_TEST_LOCAL_USER=${adf_test_local_user}
            export ADF_TEST_LOCAL_PWD=${adf_test_local_pwd}
            export ADF_TEST_LOCAL_AUTH_DB=${adf_test_local_auth_db}
            export MDB_TEST_LOCAL_PORT=${mdb_test_local_port}
            export ADF_TEST_USER=${adf_test_user}
            export ADF_TEST_PWD=${adf_test_pwd}
            export ADF_TEST_HOST=${adf_test_host}
            export ADF_TEST_AUTH_DB=${adf_test_auth_db}
            export JAVA_HOME=${JAVA_HOME}
            export PROJECT_DIRECTORY=${PROJECT_DIRECTORY}
            export MDBJDBC_VER=${MDBJDBC_VER}
          EOT

    - command: expansions.update
      params:
        file: mongo-jdbc-driver/artifacts/expansions.yml

  "fetch source":
    - command: shell.exec
      params:
        silent: true
        script: |
          rm -rf mongo-jdbc-driver
    - command: git.get_project
      params:
        directory: mongo-jdbc-driver

  "update download center feed":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-jdbc-driver
        script: |
          ${prepare_shell}
          echo "-------- ENV update -------"
          echo "$(env)"
          echo "------------------------------"
          echo "Version = ${MDBJDBC_VER}"
          echo "sed -i "s@{RELEASE_VERSION}@${MDBJDBC_VER}@" mongo-jdbc-downloads_template.json"
          sed -i "s@{RELEASE_VERSION}@${MDBJDBC_VER}@" mongo-jdbc-downloads_template.json
          echo "-------------------------"
          cat mongo-jdbc-downloads_template.json
          echo "-------------------------"
