

package com.mongodb.jdbc.tdvt;

import static org.junit.Assert.*;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashSet;
import org.junit.Test;
import org.junit.experimental.categories.Category;

@Category(TDVTTest.class)
public class TDVTTest {
    static final String URL = "jdbc:mongodb://" + System.getenv("ADL_TEST_HOST") + "/tdvt";

    static Connection getBasicConnection() throws SQLException {
        java.util.Properties p = new java.util.Properties();
        p.setProperty("user", System.getenv("ADL_TEST_USER"));
        p.setProperty("password", System.getenv("ADL_TEST_PWD"));
        p.setProperty("database", "tdvt");
        p.setProperty("authSource", System.getenv("ADL_TEST_AUTH_DB"));
        p.setProperty("ssl", "true");
        return DriverManager.getConnection(URL, p);
    }

    static HashSet<ArrayList<String>> buildResultSetSet(ResultSet rs) throws SQLException {
        HashSet<ArrayList<String>> ret = new HashSet<>();
        ResultSetMetaData rsmd = rs.getMetaData();
        int count = rsmd.getColumnCount();
        while (rs.next()) {
            ArrayList<String> row = new ArrayList<>(count);
            for (int i = 0; i < count; ++i) {
                row.add(rs.getString(i + 1));
            }
            ret.add(row);
        }
        return ret;
    }

    @Test
    public void testCALCSBI_821_bug() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "select num4, floor(Calcs.num4) as floor, Calcs.num4-floor(Calcs.num4) as diff from Calcs limit 3");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("num4", rsmd.getColumnLabel(1));
        assertEquals("floor", rsmd.getColumnLabel(2));
        assertEquals("diff", rsmd.getColumnLabel(3));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        tyName = rsmd.getColumnTypeName(2);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        tyName = rsmd.getColumnTypeName(3);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(3);
        expectedRow.add(null);
        expectedRow.add(null);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(3);
        expectedRow.add("10.85");
        expectedRow.add("10");
        expectedRow.add("0.85");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(3);
        expectedRow.add("-13.47");
        expectedRow.add("-14");
        expectedRow.add("0.53");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCSBI_821_bug");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS0() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(from_days(floor(null) + 693961)) as `temp(test)(2074921570)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2074921570)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS0");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS1() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2348327946)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2348327946)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS1");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS2() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(from_days(floor(null) + 693961)) as `temp(test)(3062347157)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3062347157)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS2");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS3() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(1236088422)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1236088422)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS3");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS4() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(from_days(floor(null) + 693961)) as `temp(test)(1709161123)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1709161123)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS4");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS5() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(941741456)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(941741456)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS5");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS6() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(from_days(floor(null) + 693961)) - 1 + dayofweek(date_format(from_days(floor(null) + 693961), '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(4070818381)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4070818381)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS6");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS7() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1 + dayofweek(date_format(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(1209329404)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1209329404)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS7");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS8() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(from_days(floor(null) + 693961)) as `temp(test)(2284623665)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2284623665)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS8");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS9() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3556637072)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3556637072)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS9");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS10() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(from_days(floor(null) + 693961)) as `temp(test)(20465857)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(20465857)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS10");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS11() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3365622206)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3365622206)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS11");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS12() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(from_days(floor(null) + 693961)) as `temp(test)(1193407708)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1193407708)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS12");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS13() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3498421513)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3498421513)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS13");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS14() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select hour(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(1756144708)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1756144708)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS14");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS15() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2635020195)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2635020195)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS15");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS16() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2744314424)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2744314424)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS16");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS17() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(`Calcs`.`datetime0`) as `temp(test)(232803726)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(232803726)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("49");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("54");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("59");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS17");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS18() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(`Calcs`.`datetime0`) as `temp(test)(2176505489)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2176505489)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("49");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("54");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("59");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS18");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS19() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 minute) as `temp(test)(2741755004)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2741755004)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:50:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:15:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:18:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:31:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:44:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:17:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:02:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:22:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:31:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:14:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:23:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:31:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:55:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:35:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:31:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:58:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 08:00:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS19");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS20() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(2526477208)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2526477208)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS20");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS21() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(2007354609)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2007354609)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS21");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS22() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3928745396)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3928745396)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS22");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS23() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(746880020)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(746880020)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS23");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS24() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2699142763)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2699142763)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS24");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS25() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(from_days(floor(null) + 693961)) as `temp(test)(1634134069)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1634134069)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS25");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS26() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(1949844743)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1949844743)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS26");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS27() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(from_days(floor(null) + 693961)) as `temp(test)(3376136658)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3376136658)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS27");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS28() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3672267408)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3672267408)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS28");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS29() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(from_days(floor(null) + 693961)) as `temp(test)(2406708804)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2406708804)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS29");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS30() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1 + dayofweek(date_format(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(1073594909)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1073594909)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS30");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS31() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(from_days(floor(null) + 693961)) - 1 + dayofweek(date_format(from_days(floor(null) + 693961), '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(4016689999)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4016689999)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS31");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS32() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3405047399)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3405047399)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS32");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS33() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(from_days(floor(null) + 693961)) as `temp(test)(55506858)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(55506858)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS33");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS34() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3460070750)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3460070750)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS34");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS35() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(from_days(floor(null) + 693961)) as `temp(test)(1494289478)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1494289478)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS35");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS36() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3227046355)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3227046355)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS36");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS37() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(from_days(floor(null) + 693961)) as `temp(test)(1233941598)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1233941598)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS37");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS38() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select hour(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3874232094)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3874232094)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS38");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS39() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(1546814749)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1546814749)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS39");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS40() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3692431276)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3692431276)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS40");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS41() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(`Calcs`.`int0`) as `temp(test)(3910975586)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3910975586)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS41");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS42() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count((`Calcs`.`bool0` <> 0)) as `temp(test)(1133866179)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1133866179)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS42");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS43() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(`Calcs`.`date3`) as `temp(test)(3590771088)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3590771088)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS43");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS44() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(`Calcs`.`num4`) as `temp(test)(1804085677)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1804085677)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS44");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS45() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(`Calcs`.`str2`) as `temp(test)(2760211945)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2760211945)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS45");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS46() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`date2`) as `temp(test)(3386714330)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3386714330)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(16);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("39");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("76");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("110");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("117");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("150");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("155");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("224");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("246");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("253");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("262");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("312");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS46");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS47() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`date2`) as `temp(test)(1554877814)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1554877814)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(16);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("39");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("76");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("110");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("117");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("150");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("155");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("224");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("246");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("253");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("262");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("312");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS47");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS48() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`datetime0`) as `temp(test)(680392169)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(680392169)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("186");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("191");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("196");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("199");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("201");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("204");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("205");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("210");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("213");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("215");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS48");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS49() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`datetime0`) as `temp(test)(792760981)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(792760981)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("186");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("191");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("196");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("199");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("201");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("204");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("205");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("210");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("213");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("215");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS49");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS50() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:%i:%s' ), interval 0 second ) as `temp(test)(4192719501)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4192719501)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS50");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS51() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:%i:%s' ), interval 0 second ) as `temp(test)(2927274352)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2927274352)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS51");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS52() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when 2 >= 0 then left(`Calcs`.`str1`,2) else null end) as `temp(test)(2443162804)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2443162804)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("AI");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("AN");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BI");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BU");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CD");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CL");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CO");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DO");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DV");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ER");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS52");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS53() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when 3 >= 0 then left(`Calcs`.`str2`,3) else null end) as `temp(test)(1954670685)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1954670685)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eig");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ele");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fif");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fiv");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fou");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nin");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("thr");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twe");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS53");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS54() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when `Calcs`.`int0` >= 0 then left(`Calcs`.`str2`,`Calcs`.`int0`) else null end) as `temp(test)(3664185027)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3664185027)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("elev");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("four");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("o");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixt");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS54");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS55() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:%i:%s' ), interval 0 second ) as `temp(test)(3300724379)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3300724379)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS55");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS56() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(`Calcs`.`date2`) as `temp(test)(4107590482)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4107590482)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Friday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Saturday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sunday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Thursday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Tuesday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Wednesday");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS56");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS57() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(`Calcs`.`datetime0`) as `temp(test)(766794695)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(766794695)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Friday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Monday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Saturday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sunday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Thursday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Wednesday");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS57");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS58() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 1 as `temp(test)(3095770696)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3095770696)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS58");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS59() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 0 as `temp(test)(334867691)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(334867691)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS59");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS60() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:%i:00' ), interval 0 second ) as `temp(test)(1224905293)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1224905293)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS60");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS61() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`date2`) as `temp(test)(3044284514)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3044284514)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS61");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS62() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`date2`) as `temp(test)(2383411022)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2383411022)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS62");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS63() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`datetime0`) as `temp(test)(3392256124)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3392256124)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS63");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS64() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`datetime0`) as `temp(test)(1426463696)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1426463696)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS64");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS65() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(timestamp(`Calcs`.`datetime0`)) as `temp(test)(1770279206)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1770279206)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("56");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS65");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS66() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(timestamp(`Calcs`.`datetime0`)) as `temp(test)(4279914489)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4279914489)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("56");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS66");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS67() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 'data' as `temp(test)(2967749075)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2967749075)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DATA");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS67");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS68() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select upper(`Calcs`.`str2`) as `temp(test)(3516395767)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3516395767)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("EIGHT");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ELEVEN");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("FIFTEEN");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("FIVE");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("FOURTEEN");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("NINE");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ONE");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("SIX");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("SIXTEEN");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TEN");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("THREE");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TWELVE");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TWO");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS68");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS69() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`bool0` <> 0) as `temp(test)(3428507074)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3428507074)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS69");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS70() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`bool1` <> 0) as `temp(test)(1935567978)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1935567978)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS70");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS71() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`bool2` <> 0) as `temp(test)(3179501244)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3179501244)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS71");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS72() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`bool3` <> 0) as `temp(test)(1288552116)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1288552116)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS72");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS77() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`datetime0` as `temp(test)(3848052829)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3848052829)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS77");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS78() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`datetime1` as `temp(test)(1108086785)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1108086785)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS78");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS79() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`key` as `temp(test)(3382465274)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3382465274)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key01");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key02");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key03");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key06");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key07");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key08");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key09");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key15");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("key16");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS79");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS80() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`str0` as `temp(test)(55415805)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(55415805)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("FURNITURE");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("OFFICE SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TECHNOLOGY");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS80");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS81() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`str1` as `temp(test)(2285743265)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2285743265)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("AIR PURIFIERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ANSWERING MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDER ACCESSORIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDER CLIPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDING MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDING SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BUSINESS COPIERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BUSINESS ENVELOPES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CD-R MEDIA");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CLAMP ON LAMPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CLOCKS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CONFERENCE PHONES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CORDED KEYBOARDS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CORDLESS KEYBOARDS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DOT MATRIX PRINTERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DVD");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ERICSSON");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS81");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS82() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`str2` as `temp(test)(3228347817)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3228347817)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS82");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS83() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`str3` as `temp(test)(286811776)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(286811776)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS83");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS87() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`int0` as `temp(test)(3174765981)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3174765981)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS87");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS88() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`int1` as `temp(test)(2829869592)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2829869592)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS88");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS89() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`int2` as `temp(test)(551775594)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(551775594)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS89");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS90() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`int3` as `temp(test)(524492059)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(524492059)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(11);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS90");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS91() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`num0` as `temp(test)(3934956185)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3934956185)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS91");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS92() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`num1` as `temp(test)(129981160)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(129981160)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.78");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS92");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS93() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`num2` as `temp(test)(1053269056)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1053269056)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.79");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.46");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.87");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.51");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.69");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13.04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.73");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.86");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS93");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS94() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`num3` as `temp(test)(3320504981)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3320504981)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-19.96");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-18.43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-13.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-12.17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-11.52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10.81");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10.56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9.31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-7.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.62");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4.79");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2.6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.64");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.84");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.93");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.93");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS94");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS95() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`num4` as `temp(test)(3786834202)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3786834202)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14.21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-13.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10.24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.82");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.77");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.75");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.85");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19.39");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS95");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS97() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 day) as `temp(test)(2728495522)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2728495522)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-06 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-10 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-13 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-20 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-24 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-03 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS97");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS100() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select min(`Calcs`.`datetime0`) as `temp(test)(2572329321)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2572329321)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:28");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS100");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS101() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`date2`) - year(`Calcs`.`date3`))*4 + (quarter(`Calcs`.`date2`) - quarter(`Calcs`.`date3`))) as `temp(test)(4144088821)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4144088821)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-102");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS101");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS102() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`)))*4 + (quarter(`Calcs`.`datetime0`) - quarter(timestamp(`Calcs`.`date2`)))) as `temp(test)(2035564840)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2035564840)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("66");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("95");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("96");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("109");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("110");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("112");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("121");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("122");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("128");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS102");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS103() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(`Calcs`.`date2`) as `temp(test)(477986140)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(477986140)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("April");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("August");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("February");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("January");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("July");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("June");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("March");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("May");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("November");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("September");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS103");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS104() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(`Calcs`.`datetime0`) as `temp(test)(2224240773)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2224240773)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("August");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("July");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS104");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS105() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 'data' as `temp(test)(535453017)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(535453017)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Data");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS105");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS106() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`str1`) then null 	when isnull(`Calcs`.`str2`) then null 	else least(`Calcs`.`str1`, `Calcs`.`str2`) end) as `temp(test)(497224717)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(497224717)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("AIR PURIFIERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ANSWERING MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDER CLIPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDING MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BUSINESS COPIERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BUSINESS ENVELOPES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CD-R MEDIA");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CLAMP ON LAMPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CLOCKS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CONFERENCE PHONES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CORDLESS KEYBOARDS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DOT MATRIX PRINTERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DVD");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS106");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS107() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`str2`) then null 	when isnull(`Calcs`.`str3`) then null 	else least(`Calcs`.`str2`, `Calcs`.`str3`) end) as `temp(test)(1239505702)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1239505702)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS107");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS108() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select hour(`Calcs`.`datetime0`) as `temp(test)(1298877827)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1298877827)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS108");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS109() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(`Calcs`.`datetime0`) as `temp(test)(1695139533)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1695139533)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("49");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("54");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("59");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS109");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS110() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(`Calcs`.`datetime0`) as `temp(test)(1003104432)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1003104432)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("49");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("54");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("59");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS110");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS111() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`date2`) - year(`Calcs`.`date3`))*12 + (month(`Calcs`.`date2`) - month(`Calcs`.`date3`))) as `temp(test)(381839689)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(381839689)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-305");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-107");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-100");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-80");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS111");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS112() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`)))*12 + (month(`Calcs`.`datetime0`) - month(timestamp(`Calcs`.`date2`)))) as `temp(test)(2416406882)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2416406882)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("83");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("86");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("106");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("109");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("198");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("284");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("288");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("327");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("329");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("334");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("362");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("364");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("384");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS112");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS113() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(`Calcs`.`date2`) - year(`Calcs`.`date3`)) as `temp(test)(3489013143)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3489013143)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS113");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS114() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`))) as `temp(test)(3834106318)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3834106318)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS114");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS116() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 'bat' as `temp(test)(3161246105)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3161246105)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("bat");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS116");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS117() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select replace(`Calcs`.`str2`,'e','o') as `temp(test)(2953834147)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2953834147)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fiftoon");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fivo");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourtoon");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nino");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("oight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("olovon");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ono");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixtoon");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("throo");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ton");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twolvo");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS117");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS118() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select truncate(`Calcs`.`int1`,0) as `temp(test)(551720338)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(551720338)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS118");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS119() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when (`Calcs`.`bool0` <> 0) then 1 	when not (`Calcs`.`bool0` <> 0) then 0 	else null end) as `temp(test)(2695057561)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2695057561)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS119");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS120() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date0`) - 693961) as `temp(test)(2234960540)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2234960540)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26482");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27708");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38090");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38140");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38155");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS120");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS121() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select truncate(`Calcs`.`num2`,0) as `temp(test)(1665700248)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1665700248)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS121");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS122() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select truncate(`Calcs`.`str2`,0) as `temp(test)(2779514991)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2779514991)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS122");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS123() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (right(rtrim(`Calcs`.`str1`), length('s')) = 's') as `temp(test)(1759936097)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1759936097)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS123");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS124() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (right(rtrim(`Calcs`.`str2`), length('een')) = 'een') as `temp(test)(3179156403)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3179156403)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS124");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS129() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`datetime0`) as `temp(test)(903794974)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(903794974)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("186");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("191");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("196");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("199");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("201");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("204");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("205");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("210");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("213");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("215");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS129");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS130() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`datetime0`) as `temp(test)(3917828147)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3917828147)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("186");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("191");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("196");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("199");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("201");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("204");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("205");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("210");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("213");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("215");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS130");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS131() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`date2`) as `temp(test)(3641022413)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3641022413)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS131");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS132() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`date2`) as `temp(test)(1193998601)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1193998601)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS132");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS133() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`date2`) as `temp(test)(3641022413)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3641022413)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS133");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS134() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`date2`) as `temp(test)(1193998601)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1193998601)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS134");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS135() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`datetime0`) as `temp(test)(3800988289)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3800988289)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS135");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS136() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`datetime0`) as `temp(test)(779479971)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(779479971)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS136");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS137() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`datetime0`) as `temp(test)(3800988289)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3800988289)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS137");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS138() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`datetime0`) as `temp(test)(779479971)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(779479971)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS138");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS139() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:00:00' ), interval 0 second ) as `temp(test)(2793013592)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2793013592)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS139");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS140() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:00:00' ), interval 0 second ) as `temp(test)(2980130610)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2980130610)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS140");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS143() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(2016952657)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2016952657)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS143");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS144() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(1256216982)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1256216982)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS144");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS145() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 97 as `temp(test)(415603459)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(415603459)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("97");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS145");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS146() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ascii(`Calcs`.`str2`) as `temp(test)(526259814)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(526259814)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("101");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("102");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("110");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("111");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("115");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("116");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS146");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS147() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ascii(`Calcs`.`str1`) as `temp(test)(4258651616)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4258651616)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("65");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("66");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("67");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("68");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("69");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS147");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS148() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(3415515666)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3415515666)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS148");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS149() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(2048935536)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2048935536)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS149");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS150() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(2714077903)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2714077903)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS150");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS151() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(1800100416)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1800100416)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS151");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS153() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`bool0` <> 0) then `Calcs`.`str2` when not (`Calcs`.`bool0` <> 0) then `Calcs`.`str3` else `Calcs`.`str0` end) as `temp(test)(1007528555)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1007528555)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("OFFICE SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TECHNOLOGY");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS153");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS154() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`bool0` <> 0) then `Calcs`.`num0` when not (`Calcs`.`bool0` <> 0) then `Calcs`.`num1` else `Calcs`.`num2` end) as `temp(test)(3428504110)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3428504110)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.87");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13.04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS154");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS156() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`bool0` <> 0) then `Calcs`.`num0` when not (`Calcs`.`bool0` <> 0) then `Calcs`.`num1` else null end) as `temp(test)(750655768)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(750655768)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS156");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS157() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (((`Calcs`.`bool0` <> 0) and (`Calcs`.`bool1` <> 0)) or ((not (`Calcs`.`bool0` <> 0)) and (`Calcs`.`bool2` <> 0))) as `temp(test)(1656302737)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1656302737)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS157");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS158() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select isnull((`Calcs`.`bool0` <> 0)) as `temp(test)(4006206882)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4006206882)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS158");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS159() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`bool0` <> 0) then `Calcs`.`str2` when not (`Calcs`.`bool0` <> 0) then `Calcs`.`str3` else null end) as `temp(test)(4173709053)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4173709053)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS159");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS160() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((case when (`Calcs`.`bool0` <> 0) then (case 	when (`Calcs`.`bool1` <> 0) then 1 	when not (`Calcs`.`bool1` <> 0) then 0 	else null end) else (case 	when (`Calcs`.`bool2` <> 0) then 1 	when not (`Calcs`.`bool2` <> 0) then 0 	else null end) end) = 1) as `temp(test)(1285160207)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1285160207)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS160");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS161() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`bool0` <> 0) then `Calcs`.`num0` else `Calcs`.`num1` end) as `temp(test)(898375479)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(898375479)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(16);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.78");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS161");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS163() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`bool0` <> 0) then `Calcs`.`str2` else `Calcs`.`str3` end) as `temp(test)(490796425)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(490796425)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS163");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS164() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24*60 + floor(time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) / 60) - floor(time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)) / 60)) as `temp(test)(2300448284)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2300448284)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1185874");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1813801");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3128953");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3613439");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3768450");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4679310");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4792783");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5399482");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8698941");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12467550");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12593594");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14317097");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14446494");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14631769");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15881370");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15951376");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16858797");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS164");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS165() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24*60 + floor(time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) / 60) - floor(time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)) / 60)) as `temp(test)(2077207759)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2077207759)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1185874");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1813801");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3128953");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3613439");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3768450");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4679310");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4792783");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5399482");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8698941");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12467550");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12593594");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14317097");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14446494");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14631769");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15881370");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15951376");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16858797");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS165");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS170() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24 + floor(time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) / 3600) - floor(time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)) / 3600)) as `temp(test)(289918985)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(289918985)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19764");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30230");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52149");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("60223");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("62807");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("77988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("79879");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("89991");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("144982");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207792");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("209893");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("238618");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("240774");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("243862");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("264689");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("265856");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("280979");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS170");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS171() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`date2`) - 1 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(3370976929)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3370976929)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS171");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS172() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(date(`Calcs`.`date3`)) - 1 + dayofweek(date_format(date(`Calcs`.`date3`), '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(2942029924)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2942029924)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS172");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS173() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(3904538922)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3904538922)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS173");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS174() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(3904538922)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3904538922)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS174");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS175() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(1590117682)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1590117682)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS175");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS176() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(4199707040)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4199707040)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS176");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS177() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(2589771434)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2589771434)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS177");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS178() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(1875124737)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1875124737)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS178");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS179() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select truncate(`Calcs`.`num4`,0) as `temp(test)(663412696)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(663412696)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(11);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS179");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS180() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select truncate(concat(concat(`Calcs`.`num4`), concat(`Calcs`.`int0`)),0) as `temp(test)(1616170242)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1616170242)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS180");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS181() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`date2`) as `temp(test)(3854194266)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3854194266)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS181");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS182() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`date2`) as `temp(test)(3854194266)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3854194266)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS182");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS183() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`datetime0`) as `temp(test)(621889678)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(621889678)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS183");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS184() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(`Calcs`.`datetime0`) as `temp(test)(621889678)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(621889678)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS184");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS185() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`date2`) as `temp(test)(302607578)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(302607578)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS185");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS186() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`datetime0`) as `temp(test)(2001673842)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2001673842)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS186");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS187() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24*60*60 + (time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) - time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)))) as `temp(test)(3772571288)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3772571288)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("71152468");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("108828116");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187737217");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("216806363");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("226107022");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("280758634");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("287566980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("323968946");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("521936491");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("748053023");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("755615660");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("859025855");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("866789690");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("877906168");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("952882216");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("957082604");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1011527872");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS187");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS188() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24*60*60 + (time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) - time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)))) as `temp(test)(3405329770)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3405329770)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("71152468");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("108828116");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187737217");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("216806363");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("226107022");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("280758634");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("287566980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("323968946");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("521936491");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("748053023");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("755615660");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("859025855");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("866789690");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("877906168");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("952882216");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("957082604");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1011527872");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS188");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS189() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(885008067)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(885008067)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS189");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS190() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(3554344781)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3554344781)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS190");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS191() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(date(`Calcs`.`date2`)) as `temp(test)(2085924889)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2085924889)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS191");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS192() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(timestamp(`Calcs`.`datetime0`)) as `temp(test)(574618496)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(574618496)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS192");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS193() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 1 as `temp(test)(3095770696)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3095770696)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS193");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS194() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(date(`Calcs`.`date2`)) as `temp(test)(1165289219)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1165289219)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS194");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS195() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(timestamp(`Calcs`.`datetime0`)) as `temp(test)(3278952934)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3278952934)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS195");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS196() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(date(`Calcs`.`date2`)) as `temp(test)(3434755864)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3434755864)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS196");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS197() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(timestamp(`Calcs`.`datetime0`)) as `temp(test)(1819497289)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1819497289)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS197");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS200() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ifnull(count(distinct `Calcs`.`num2`), 0) as `temp(test)(957319405)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(957319405)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS200");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS201() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(`Calcs`.`datetime0`) as `temp(test)(3191651815)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3191651815)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("56");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS201");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS203() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( `Calcs`.`date2`, '%y-' ), (3*(quarter(`Calcs`.`date2`)-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(1126788499)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1126788499)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-10-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS203");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS204() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( `Calcs`.`datetime0`, '%y-' ), (3*(quarter(`Calcs`.`datetime0`)-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(3855281255)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3855281255)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS204");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS205() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select sum(`Calcs`.`int0`) as `temp(test)(645427419)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(645427419)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("68");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS205");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS206() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select sum(`Calcs`.`num4`) as `temp(test)(1450575838)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1450575838)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("24.02");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS206");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS207() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:00:00' ), interval 0 second ) as `temp(test)(2456153780)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2456153780)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS207");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS208() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(`Calcs`.`date2`) - 1 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(2524080111)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2524080111)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS208");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS209() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(1568799041)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1568799041)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS209");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS210() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(`Calcs`.`date2`) - ((7 + dayofweek(`Calcs`.`date2`) - 2) % 7) ), interval 0 second ) as `temp(test)(1744581337)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1744581337)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-10 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-11 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-04-29 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-06 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-18 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-21 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-18 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-05-29 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-08-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-15 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-10 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-01-29 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-22 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS210");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS211() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(`Calcs`.`date2`) - (dayofweek(`Calcs`.`date2`) - 1) ), interval 0 second ) as `temp(test)(1635756518)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1635756518)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-04-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-06 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-02 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-21 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS211");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS212() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(`Calcs`.`datetime0`) - ((7 + dayofweek(`Calcs`.`datetime0`) - 2) % 7) ), interval 0 second ) as `temp(test)(1985269479)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1985269479)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-06-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS212");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS213() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(`Calcs`.`datetime0`) - (dayofweek(`Calcs`.`datetime0`) - 1) ), interval 0 second ) as `temp(test)(3887385220)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3887385220)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-11 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS213");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS214() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 'ta' as `temp(test)(2843244905)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2843244905)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ta");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS214");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS215() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when 3 >= 0 then right(`Calcs`.`str2`,3) else null end) as `temp(test)(868342576)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(868342576)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("een");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ght");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ive");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("lve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ree");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ven");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS215");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS216() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when `Calcs`.`int0` >= 0 then right(`Calcs`.`str2`,`Calcs`.`int0`) else null end) as `temp(test)(427841631)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(427841631)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("even");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("teen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS216");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS217() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24*60 + floor(time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) / 60) - floor(time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)) / 60)) as `temp(test)(2180476504)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2180476504)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1185874");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1813801");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3128953");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3613439");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3768450");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4679310");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4792783");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5399482");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8698941");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12467550");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12593594");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14317097");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14446494");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14631769");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15881370");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15951376");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16858797");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS217");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS218() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(3361088979)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3361088979)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS218");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS219() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(299717125)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(299717125)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS219");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS220() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(`Calcs`.`date2`) as `temp(test)(3076245501)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3076245501)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS220");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS221() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(`Calcs`.`datetime0`) as `temp(test)(148436784)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(148436784)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS221");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS222() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (locate('e',`Calcs`.`str2`) > 0) as `temp(test)(1364536471)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1364536471)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS222");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS223() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (locate('ind',`Calcs`.`str1`) > 0) as `temp(test)(1380546255)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1380546255)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS223");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS225() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 day) as `temp(test)(2988076353)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2988076353)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-06 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-10 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-13 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-20 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-24 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-03 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS225");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS226() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select sign(`Calcs`.`int2`) as `temp(test)(3509671532)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3509671532)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS226");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS227() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select sign(`Calcs`.`num0`) as `temp(test)(4247289834)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4247289834)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS227");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS228() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select power(`Calcs`.`int2`,2) as `temp(test)(3037854782)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3037854782)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("25.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("64.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("81.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS228");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS230() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 'const' as `temp(test)(3972932107)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3972932107)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CONST");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS230");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS232() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(1773778045)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1773778045)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS232");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS233() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(382789366)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(382789366)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS233");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS234() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(444902156)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(444902156)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS234");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS235() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(581676997)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(581676997)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS235");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS236() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( from_days(floor(null) + 693961), '%y-' ), (3*(quarter(from_days(floor(null) + 693961))-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(1831450015)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1831450015)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS236");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS237() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-' ), (3*(quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(360201683)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(360201683)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS237");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS238() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(from_days(floor(null) + 693961)) - (dayofweek(from_days(floor(null) + 693961)) - 1) ), interval 0 second ) as `temp(test)(872678106)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(872678106)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS238");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS239() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - (dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1) ), interval 0 second ) as `temp(test)(3905701997)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3905701997)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS239");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS240() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3359079369)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3359079369)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS240");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS241() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(1326289938)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1326289938)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS241");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS242() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(2763829899)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2763829899)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS242");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS243() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(717997108)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(717997108)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS243");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS244() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(2963633898)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2963633898)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS244");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS245() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3202209617)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3202209617)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS245");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS246() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d %h:00:00' ), interval 0 second ) as `temp(test)(4266496460)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4266496460)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS246");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS247() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d %h:%i:%s' ), interval 0 second ) as `temp(test)(4131996060)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4131996060)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS247");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS248() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d %h:%i:00' ), interval 0 second ) as `temp(test)(2935754523)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2935754523)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS248");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS249() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`str1`) then null 	when isnull(`Calcs`.`str2`) then null 	else greatest(`Calcs`.`str1`, `Calcs`.`str2`) end) as `temp(test)(3052188625)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3052188625)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS249");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS250() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`str3`) then null 	when isnull(`Calcs`.`str2`) then null 	else greatest(`Calcs`.`str3`, `Calcs`.`str2`) end) as `temp(test)(2280873463)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2280873463)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS250");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS251() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`date2`) as `temp(test)(2643375604)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2643375604)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS251");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS252() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`date2`) as `temp(test)(2986242609)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2986242609)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS252");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS253() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`datetime0`) as `temp(test)(1608337423)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1608337423)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS253");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS254() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`datetime0`) as `temp(test)(925465559)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(925465559)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS254");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS257() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval (3 * 1) month) as `temp(test)(454013980)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(454013980)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-04 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-05 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-09 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-12 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-14 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-17 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-19 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-22 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-23 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-25 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-26 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-28 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-28 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-28 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-10-31 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-11-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS257");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS258() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(`Calcs`.`date2`) - 1 + ((7 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 2) % 7) ) / 7)) as `temp(test)(499182808)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(499182808)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS258");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS259() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(`Calcs`.`date2`) - 1 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(2644944117)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2644944117)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS259");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS260() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + ((7 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 2) % 7) ) / 7)) as `temp(test)(3094931040)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3094931040)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS260");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS261() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(2831690081)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2831690081)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS261");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS262() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select if(isnull(6), null, substring(`Calcs`.`str1`,greatest(1,floor(6)))) as `temp(test)(98307893)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(98307893)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" ON LAMPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ATRIX PRINTERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("D KEYBOARDS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ESS COPIERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ESS ENVELOPES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ESS KEYBOARDS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("MEDIA");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("NG MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("NG SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("R ACCESSORIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("R CLIPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("RENCE PHONES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("RING MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("S");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("SON");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("URIFIERS");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS262");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS266() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`datetime0`) as `temp(test)(2537119552)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2537119552)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("186");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("191");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("196");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("199");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("201");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("204");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("205");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("210");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("213");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("215");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS266");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS267() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int1` + 0.0) as `temp(test)(1533389080)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1533389080)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS267");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS268() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case         when (`Calcs`.`bool0` <> 0) then 1.0         when not (`Calcs`.`bool0` <> 0) then 0.0         else null end) as `temp(test)(2538631291)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2538631291)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("decimal"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS268");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS269() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date0`) - 693961.0 + time_to_sec(adddate(`Calcs`.`date0`, interval 0 second)) / (24.0 * 60.0 * 60.0) ) as `temp(test)(64617177)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(64617177)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26482.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27708.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38090.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38140.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38155.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS269");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS270() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num2` + 0.0) as `temp(test)(2707307071)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2707307071)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.79");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.46");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.87");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.51");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.69");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13.04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.73");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.86");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS270");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS271() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (0.0 + `Calcs`.`str2`) as `temp(test)(1394352864)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1394352864)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS271");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS272() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(ifnull(timestamp('2010-10-10 10:10:10.4'),str_to_date('2010-10-10 10:10:10.4','%b %e %y %l:%i%p'))) as `temp(test)(2143701310)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2143701310)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS272");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS273() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select lower(`Calcs`.`str2`) as `temp(test)(1011144549)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1011144549)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS273");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS274() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select lower(`Calcs`.`str1`) as `temp(test)(2419238545)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2419238545)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("air purifiers");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("answering machines");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("binder accessories");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("binder clips");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("binding machines");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("binding supplies");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("business copiers");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("business envelopes");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("cd-r media");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("clamp on lamps");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("clocks");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("conference phones");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("corded keyboards");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("cordless keyboards");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("dot matrix printers");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("dvd");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ericsson");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS274");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS279() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`date2`) - 1 + ((7 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 2) % 7) ) / 7) as `temp(test)(3400925592)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3400925592)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS279");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS280() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`date2`) - 1 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(1636919423)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1636919423)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS280");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS281() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`date2`) - 1 + ((7 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 2) % 7) ) / 7) as `temp(test)(3400925592)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3400925592)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS281");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS282() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`date2`) - 1 + dayofweek(date_format(`Calcs`.`date2`, '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(1636919423)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1636919423)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("18");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("45");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS282");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS283() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + ((7 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 2) % 7) ) / 7) as `temp(test)(3595934100)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3595934100)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS283");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS284() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(4171408365)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4171408365)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS284");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS285() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + ((7 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 2) % 7) ) / 7) as `temp(test)(3595934100)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3595934100)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS285");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS286() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(`Calcs`.`datetime0`) - 1 + dayofweek(date_format(`Calcs`.`datetime0`, '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(4171408365)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4171408365)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS286");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS287() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(`Calcs`.`date2`) as `temp(test)(1706489238)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1706489238)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Friday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Saturday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sunday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Thursday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Tuesday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Wednesday");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS287");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS288() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(`Calcs`.`date2`) as `temp(test)(3326454598)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3326454598)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Friday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Saturday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sunday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Thursday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Tuesday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Wednesday");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS288");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS289() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(`Calcs`.`datetime0`) as `temp(test)(1346443059)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1346443059)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Friday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Monday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Saturday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sunday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Thursday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Wednesday");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS289");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS290() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(`Calcs`.`datetime0`) as `temp(test)(2366796649)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2366796649)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Friday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Monday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Saturday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sunday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Thursday");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Wednesday");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS290");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS294() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(`Calcs`.`date2`) as `temp(test)(1438827077)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1438827077)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS294");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS295() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(`Calcs`.`date2`) as `temp(test)(331799714)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(331799714)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS295");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS296() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(`Calcs`.`datetime0`) as `temp(test)(3561169943)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3561169943)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS296");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS297() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(`Calcs`.`datetime0`) as `temp(test)(2283476857)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2283476857)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS297");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS298() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(from_days(floor(null) + 693961)) - year(from_days(floor(null) + 693961))) as `temp(test)(523796786)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(523796786)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS298");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS299() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(1757347367)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1757347367)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS299");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS300() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(from_days(floor(null) + 693961)) - year(from_days(floor(null) + 693961)))*4 + (quarter(from_days(floor(null) + 693961)) - quarter(from_days(floor(null) + 693961)))) as `temp(test)(2892653053)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2892653053)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS300");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS301() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*4 + (quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))) as `temp(test)(208306356)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(208306356)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS301");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS302() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*12 + (month(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - month(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))) as `temp(test)(3602652935)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3602652935)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS302");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS303() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(from_days(floor(null) + 693961)) - year(from_days(floor(null) + 693961)))*12 + (month(from_days(floor(null) + 693961)) - month(from_days(floor(null) + 693961)))) as `temp(test)(2736821)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2736821)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS303");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS304() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(from_days(floor(null) + 693961)) - (dayofweek(from_days(floor(null) + 693961)) - 1)) - (to_days(from_days(floor(null) + 693961)) - (dayofweek(from_days(floor(null) + 693961)) - 1) ) )/7) as `temp(test)(4175150207)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4175150207)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS304");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS305() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - (dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1)) - (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - (dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1) ) )/7) as `temp(test)(573134401)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(573134401)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS305");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS306() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(from_days(floor(null) + 693961)) - to_days(from_days(floor(null) + 693961))) as `temp(test)(4284829593)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4284829593)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS306");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS307() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(2962792486)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2962792486)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS307");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS308() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(2631483492)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2631483492)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS308");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS309() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(from_days(floor(null) + 693961)) - to_days(from_days(floor(null) + 693961))) as `temp(test)(1607049625)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1607049625)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS309");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS310() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(1299959868)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1299959868)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS310");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS311() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(from_days(floor(null) + 693961)) - to_days(from_days(floor(null) + 693961))) as `temp(test)(1641185958)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1641185958)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS311");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS312() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*24 + floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 3600) - floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 3600)) as `temp(test)(1258940435)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1258940435)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS312");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS313() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*24*60 + floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 60) - floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 60)) as `temp(test)(401058515)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(401058515)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS313");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS314() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*24*60*60 + (time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) - time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)))) as `temp(test)(2833809390)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2833809390)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS314");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS315() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select hour(`Calcs`.`datetime0`) as `temp(test)(367110610)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(367110610)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS315");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS316() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select hour(`Calcs`.`datetime0`) as `temp(test)(1785761163)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1785761163)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS316");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS317() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select '>  <' as `temp(test)(3167158121)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3167158121)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(">  <");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS317");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS318() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( `Calcs`.`date2`, '%y-' ), (3*(quarter(`Calcs`.`date2`)-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(4146692480)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4146692480)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-10-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS318");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS319() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( `Calcs`.`date2`, '%y-' ), (3*(quarter(`Calcs`.`date2`)-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(560528826)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(560528826)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-10-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS319");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS320() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( `Calcs`.`datetime0`, '%y-' ), (3*(quarter(`Calcs`.`datetime0`)-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(105511240)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(105511240)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS320");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS321() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( `Calcs`.`datetime0`, '%y-' ), (3*(quarter(`Calcs`.`datetime0`)-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(755301458)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(755301458)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS321");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS330() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select trim(concat(concat(' ', `Calcs`.`str2`), ' ')) as `temp(test)(1903992131)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1903992131)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS330");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS333() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(4265410721)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4265410721)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS333");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS334() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(1278698096)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1278698096)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS334");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS335() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(3729248905)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3729248905)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS335");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS336() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(965356852)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(965356852)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS336");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS337() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 4 as `temp(test)(5037157)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(5037157)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS337");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS338() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select length(`Calcs`.`str2`) as `temp(test)(382448263)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(382448263)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS338");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS339() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`date2`) as `temp(test)(653088523)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(653088523)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS339");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS340() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(`Calcs`.`datetime0`) as `temp(test)(3134852500)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3134852500)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS340");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS341() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ifnull(`Calcs`.`int1`, 0) as `temp(test)(3976315675)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3976315675)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS341");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS342() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(591126205)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(591126205)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS342");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS343() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3034828475)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3034828475)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS343");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS345() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case `Calcs`.`int0` when 1 then 'test1' when 3 then 'test3' else 'testelse' end) as `temp(test)(4155671032)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4155671032)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("test1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("test3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("testelse");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS345");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS346() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`int0` = 1) then 'yes' else 'no' end) as `temp(test)(344883989)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(344883989)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("no");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("yes");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS346");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS347() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`int0` = 1) then 'yes' when (`Calcs`.`int0` = 3) then 'yes3' else 'no' end) as `temp(test)(1470681487)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1470681487)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("no");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("yes");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("yes3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS347");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS348() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ifnull(`Calcs`.`int0`, 0) as `temp(test)(404394451)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(404394451)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS348");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS349() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`int0` > 3) then 'yes' when not (`Calcs`.`int0` > 3) then 'no' else null end) as `temp(test)(2582407534)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2582407534)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("no");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("yes");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS349");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS350() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`int0` > 3) then 'yes' when not (`Calcs`.`int0` > 3) then 'no' else 'i dont know' end) as `temp(test)(485230187)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(485230187)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("I dont know");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("no");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("yes");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS350");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS351() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select isnull(`Calcs`.`int0`) as `temp(test)(3944872634)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3944872634)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS351");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS352() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 'yes' as `temp(test)(1030668643)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1030668643)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("yes");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS352");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS353() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`int0` <> 1) then 'yes' else 'no' end) as `temp(test)(1548476355)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1548476355)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("no");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("yes");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS353");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS354() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`num0` > `Calcs`.`num1`) then `Calcs`.`num0` when not (`Calcs`.`num0` > `Calcs`.`num1`) then `Calcs`.`num1` else null end) as `temp(test)(2733626226)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2733626226)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.42");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS354");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS355() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select isnull(`Calcs`.`num4`) as `temp(test)(746449830)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(746449830)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS355");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS356() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select isnull(`Calcs`.`str2`) as `temp(test)(4153117630)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4153117630)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS356");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS357() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`str0` > `Calcs`.`str1`) then `Calcs`.`str2` when not (`Calcs`.`str0` > `Calcs`.`str1`) then `Calcs`.`str3` else null end) as `temp(test)(661341884)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(661341884)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS357");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS360() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select lower(`Calcs`.`str0`) as `temp(test)(157987442)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(157987442)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("furniture");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("office supplies");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("technology");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS360");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS361() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`num0` > `Calcs`.`num1`) then `Calcs`.`str2` when not (`Calcs`.`num0` > `Calcs`.`num1`) then `Calcs`.`str3` else `Calcs`.`str0` end) as `temp(test)(3250337019)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3250337019)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("OFFICE SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TECHNOLOGY");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS361");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS363() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`num0` > `Calcs`.`num1`) then `Calcs`.`num0` when not (`Calcs`.`num0` > `Calcs`.`num1`) then `Calcs`.`num1` else `Calcs`.`num2` end) as `temp(test)(1162317302)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1162317302)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(16);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.79");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.87");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13.04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.25");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS363");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS364() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(lower(`Calcs`.`str0`)) then null 	when isnull(`Calcs`.`str2`) then null 	else least(lower(`Calcs`.`str0`), `Calcs`.`str2`) end) as `temp(test)(1389344980)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1389344980)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(11);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("furniture");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("office supplies");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("technology");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS364");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS366() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ifnull(`Calcs`.`num4`, -1) as `temp(test)(4224438892)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4224438892)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14.21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-13.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10.24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.82");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.77");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.75");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.85");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19.39");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS366");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS367() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ifnull(`Calcs`.`str2`, 'i''m null') as `temp(test)(3314993157)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3314993157)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("i'm null");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS367");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS368() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select isnull(`Calcs`.`date0`) as `temp(test)(2842042984)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2842042984)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS368");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS369() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((case when (`Calcs`.`num0` > `Calcs`.`num1`) then (case 	when (`Calcs`.`bool1` <> 0) then 1 	when not (`Calcs`.`bool1` <> 0) then 0 	else null end) else (case 	when (`Calcs`.`bool2` <> 0) then 1 	when not (`Calcs`.`bool2` <> 0) then 0 	else null end) end) = 1) as `temp(test)(4227881224)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4227881224)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS369");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS370() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`num0` > `Calcs`.`num1`) then `Calcs`.`num0` else `Calcs`.`num1` end) as `temp(test)(709594122)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(709594122)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS370");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS372() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`str0` > `Calcs`.`str1`) then `Calcs`.`str2` else `Calcs`.`str3` end) as `temp(test)(2963734906)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2963734906)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS372");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS373() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case (case 	when (`Calcs`.`num0` > `Calcs`.`num1`) then 1 	when not (`Calcs`.`num0` > `Calcs`.`num1`) then 0 	else null end) when 1 then `Calcs`.`num0` when 0 then `Calcs`.`num1` else `Calcs`.`num2` end) as `temp(test)(4143049742)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4143049742)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(16);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.79");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.87");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13.04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.25");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS373");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS375() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case (case 	when (`Calcs`.`num0` > `Calcs`.`num1`) then 1 	when not (`Calcs`.`num0` > `Calcs`.`num1`) then 0 	else null end) when 1 then `Calcs`.`str2` when 0 then `Calcs`.`str3` else `Calcs`.`str0` end) as `temp(test)(2451799140)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2451799140)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("OFFICE SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TECHNOLOGY");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS375");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS376() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case (case 	when (`Calcs`.`bool0` <> 0) then 1 	when not (`Calcs`.`bool0` <> 0) then 0 	else null end) when 1 then `Calcs`.`num0` when 0 then `Calcs`.`num1` else `Calcs`.`num2` end) as `temp(test)(1574830296)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1574830296)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.87");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13.04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS376");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS379() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case (case 	when (`Calcs`.`bool0` <> 0) then 1 	when not (`Calcs`.`bool0` <> 0) then 0 	else null end) when 1 then `Calcs`.`str2` when 0 then `Calcs`.`str3` else `Calcs`.`str0` end) as `temp(test)(166894492)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(166894492)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("OFFICE SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("TECHNOLOGY");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS379");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS380() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case when (`Calcs`.`str1` = 'clocks') then '*anonymous*' when (`Calcs`.`str1` = 'dvd') then '*public*' else `Calcs`.`str1` end) as `temp(test)(899461877)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(899461877)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("*Anonymous*");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("*Public*");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("AIR PURIFIERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ANSWERING MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDER ACCESSORIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDER CLIPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDING MACHINES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BINDING SUPPLIES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BUSINESS COPIERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("BUSINESS ENVELOPES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CD-R MEDIA");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CLAMP ON LAMPS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CONFERENCE PHONES");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CORDED KEYBOARDS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("CORDLESS KEYBOARDS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("DOT MATRIX PRINTERS");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ERICSSON");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS380");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS381() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(`Calcs`.`date2`) - (dayofweek(`Calcs`.`date2`) - 1) ), interval 0 second ) as `temp(test)(1630131013)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1630131013)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-04-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-06 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-02 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-21 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS381");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS382() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(`Calcs`.`datetime0`) - (dayofweek(`Calcs`.`datetime0`) - 1) ), interval 0 second ) as `temp(test)(3937478358)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3937478358)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-11 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS382");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS383() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(`Calcs`.`datetime0`) as `temp(test)(1235924899)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1235924899)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("56");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS383");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS384() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 second) as `temp(test)(621896091)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(621896091)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:01");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:45");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:51");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:53");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:24");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS384");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS385() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24*60*60 + (time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) - time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)))) as `temp(test)(3711433751)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3711433751)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("71152468");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("108828116");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187737217");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("216806363");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("226107022");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("280758634");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("287566980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("323968946");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("521936491");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("748053023");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("755615660");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("859025855");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("866789690");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("877906168");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("952882216");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("957082604");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1011527872");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS385");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS386() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(`Calcs`.`date2`) - year(`Calcs`.`date3`)) as `temp(test)(427588088)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(427588088)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS386");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS387() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(`Calcs`.`date2`) - year(`Calcs`.`date3`)) as `temp(test)(2526313076)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2526313076)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS387");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS388() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`))) as `temp(test)(1540391660)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1540391660)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS388");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS389() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`))) as `temp(test)(3579576882)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3579576882)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS389");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS390() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(`Calcs`.`datetime0`) as `temp(test)(2740605400)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2740605400)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("56");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS390");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS391() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(`Calcs`.`datetime0`) as `temp(test)(356589430)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(356589430)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(15);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("56");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS391");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS392() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24 + floor(time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) / 3600) - floor(time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)) / 3600)) as `temp(test)(1898404202)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1898404202)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19764");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30230");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52149");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("60223");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("62807");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("77988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("79879");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("89991");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("144982");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207792");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("209893");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("238618");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("240774");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("243862");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("264689");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("265856");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("280979");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS392");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS393() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`)))*24 + floor(time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) / 3600) - floor(time_to_sec(adddate(timestamp(`Calcs`.`date2`), interval 0 second)) / 3600)) as `temp(test)(4263325709)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4263325709)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19764");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30230");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("52149");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("60223");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("62807");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("77988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("79879");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("89991");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("144982");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207792");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("209893");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("238618");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("240774");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("243862");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("264689");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("265856");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("280979");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS393");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS394() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select abs(`Calcs`.`num0`) as `temp(test)(3816473022)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3816473022)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS394");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS395() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`num0` as `temp(test)(965512284)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(965512284)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS395");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS396() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select `Calcs`.`num1` as `temp(test)(1826927073)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1826927073)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.12");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.78");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.38");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.05");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS396");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS397() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((`Calcs`.`bool0` <> 0) and (`Calcs`.`bool1` <> 0)) as `temp(test)(3618731173)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3618731173)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS397");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS398() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((`Calcs`.`bool0` <> 0) and (`Calcs`.`bool1` <> 0) or not (`Calcs`.`bool0` <> 0) and not (`Calcs`.`bool1` <> 0)) as `temp(test)(830571724)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(830571724)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS398");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS399() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((`Calcs`.`bool0` <> 0) and not (`Calcs`.`bool1` <> 0) or not (`Calcs`.`bool0` <> 0) and (`Calcs`.`bool1` <> 0)) as `temp(test)(3090944671)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3090944671)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS399");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS400() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((`Calcs`.`bool0` <> 0) or (`Calcs`.`bool1` <> 0)) as `temp(test)(4182992858)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4182992858)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS400");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS401() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date0` = date('1972-07-04')) as `temp(test)(397499995)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(397499995)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS401");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS402() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date0` >= date('1975-11-12')) as `temp(test)(1366787273)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1366787273)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS402");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS403() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date0` > date('1975-11-12')) as `temp(test)(3193322782)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3193322782)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS403");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS404() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date0` <= date('1975-11-12')) as `temp(test)(822657216)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(822657216)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS404");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS405() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date0` < date('1975-11-12')) as `temp(test)(3764753091)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3764753091)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS405");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS407() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(date('2004-01-01'))) + (time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) - time_to_sec(adddate(date('2004-01-01'), interval 0 second))) / (60 * 60 * 24)) as `temp(test)(100938644)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(100938644)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("185.951");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("186.5516");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("190.4289");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("193.7294");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("195.3215");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("195.345");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("198.5847");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("200.9316");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("203.0211");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("204.8845");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("206.6406");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207.5212");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("209.2881");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("209.5239");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("209.9794");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("212.4985");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("214.3329");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS407");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS408() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "select date_sub(date_sub(`Calcs`.`date0`, interval floor(`Calcs`.`num4`) day), interval 60 * 60 * 24 * (`Calcs`.`num4` - floor(`Calcs`.`num4`)) second) as `temp(test)(2923065813)(0)` from `Calcs` group by 1 order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2923065813)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-06-23 03:36:00.000000");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1975-11-25 11:16:48.000000");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-06-10 01:12:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-06-10 16:19:12");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS408");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS409() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date0` <> date('1975-11-12')) as `temp(test)(798936259)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(798936259)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS409");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS410() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(`Calcs`.`date0`, interval floor(`Calcs`.`num4`) day), interval 60 * 60 * 24 * (`Calcs`.`num4` - floor(`Calcs`.`num4`)) second) as `temp(test)(2067341949)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2067341949)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-14 20:23:59.999999");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1975-10-29 12:43:11.999999");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-05-28 22:48:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-06-27 07:40:48");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS410");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS411() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 0 as `temp(test)(1303362598)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1303362598)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS411");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS412() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int0` % `Calcs`.`int1`) as `temp(test)(1307456344)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1307456344)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS412");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS413() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int0` / `Calcs`.`int1`) as `temp(test)(2402101080)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2402101080)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-0.8889");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-0.3333");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.6667");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS413");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS414() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int3` / `Calcs`.`int2`) as `temp(test)(3559262472)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3559262472)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(16);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.6667");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2.8333");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1.2222");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-0.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-0.2222");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1.6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.5");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS414");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS416() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (-`Calcs`.`num0`) as `temp(test)(4188722171)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4188722171)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-15.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS416");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS417() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`bool0` = 0) as `temp(test)(1413132553)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1413132553)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS417");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS418() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select null as `temp(test)(496893948)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(496893948)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS418");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS420() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` = abs(`Calcs`.`num0`)) as `temp(test)(3360366790)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3360366790)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS420");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS421() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` = abs(`Calcs`.`num0`)) as `temp(test)(2564078271)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2564078271)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS421");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS422() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` >= `Calcs`.`num1`) as `temp(test)(1366300770)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1366300770)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS422");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS423() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` > `Calcs`.`num1`) as `temp(test)(4123004830)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4123004830)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS423");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS424() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` <= `Calcs`.`num1`) as `temp(test)(1224631717)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1224631717)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS424");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS425() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` < `Calcs`.`num1`) as `temp(test)(1731699042)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1731699042)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS425");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS426() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` - `Calcs`.`num1`) as `temp(test)(3781247900)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3781247900)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-23.13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-19.01");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-16.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-12.88");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5.55");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.53");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.88");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5.92");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS426");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS427() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` <> abs(`Calcs`.`num0`)) as `temp(test)(4047276454)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4047276454)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS427");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS428() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` <> abs(`Calcs`.`num0`)) as `temp(test)(3492695719)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3492695719)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS428");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS430() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` + `Calcs`.`num1`) as `temp(test)(977554451)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(977554451)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8.27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5.59");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5.88");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.55");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.42");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19.47");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("20.72");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("25.48");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS430");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS432() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`num0` * `Calcs`.`num1`) as `temp(test)(1861245368)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1861245368)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-116.651");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-82.533");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-32.83");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("31.675");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("94.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("103.566");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("153.546");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS432");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS433() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`str2` = (case when (`Calcs`.`num3` > 0) then `Calcs`.`str2` when not (`Calcs`.`num3` > 0) then `Calcs`.`str3` else null end)) as `temp(test)(1635792874)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1635792874)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS433");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS434() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`str2` >= (case when (`Calcs`.`num3` > 0) then lower(`Calcs`.`str0`) when not (`Calcs`.`num3` > 0) then `Calcs`.`str3` else null end)) as `temp(test)(1555382477)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1555382477)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS434");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS436() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`str2` <= (case when (`Calcs`.`num3` > 0) then lower(`Calcs`.`str0`) when not (`Calcs`.`num3` > 0) then `Calcs`.`str3` else null end)) as `temp(test)(2776534421)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2776534421)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS436");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS437() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`str2` < (case when (`Calcs`.`num3` > 0) then lower(`Calcs`.`str0`) when not (`Calcs`.`num3` > 0) then `Calcs`.`str3` else null end)) as `temp(test)(398649381)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(398649381)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS437");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS438() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`str2` <> (case when (`Calcs`.`num3` > 0) then `Calcs`.`str2` when not (`Calcs`.`num3` > 0) then `Calcs`.`str3` else null end)) as `temp(test)(119026413)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(119026413)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS438");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS439() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(`Calcs`.`str2`, `Calcs`.`str3`) as `temp(test)(724155660)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(724155660)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eighte");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("elevene");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteene");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("onee");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteene");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("tene");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("threee");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twoe");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS439");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS440() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 'pat o''hanrahan & <matthew eldridge]''' as `temp(test)(627207302)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(627207302)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Pat O'Hanrahan & <Matthew Eldridge]'");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS440");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS441() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 1 as `temp(test)(1507734681)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1507734681)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS441");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS443() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`date2`) - year(`Calcs`.`date3`))*12 + (month(`Calcs`.`date2`) - month(`Calcs`.`date3`))) as `temp(test)(2958462977)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2958462977)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-305");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-107");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-100");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-80");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS443");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS444() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`date2`) - year(`Calcs`.`date3`))*12 + (month(`Calcs`.`date2`) - month(`Calcs`.`date3`))) as `temp(test)(667124691)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(667124691)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-305");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-107");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-100");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-80");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS444");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS445() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`)))*12 + (month(`Calcs`.`datetime0`) - month(timestamp(`Calcs`.`date2`)))) as `temp(test)(2463700949)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2463700949)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("83");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("86");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("106");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("109");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("198");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("284");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("288");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("327");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("329");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("334");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("362");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("364");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("384");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS445");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS446() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`)))*12 + (month(`Calcs`.`datetime0`) - month(timestamp(`Calcs`.`date2`)))) as `temp(test)(3778274693)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3778274693)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("71");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("83");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("86");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("106");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("109");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("198");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("284");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("288");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("327");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("329");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("334");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("362");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("364");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("384");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS446");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS451() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(truncate(`Calcs`.`num4`,0)) as `temp(test)(1425036653)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1425036653)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(11);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS451");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS452() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select timestamp(`Calcs`.`date2`) as `temp(test)(1486024523)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1486024523)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS452");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS453() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - 693961.0 + time_to_sec(adddate(`Calcs`.`date2`, interval 0 second)) / (24.0 * 60.0 * 60.0) ) as `temp(test)(2671902822)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2671902822)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("26490.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27103.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("27150.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28010.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28162.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28233.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29426.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29530.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32145.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34442.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34852.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34943.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35578.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35690.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36017.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36924.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37371.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS453");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS454() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select trim(date_format(`Calcs`.`date2`, '%b %e %y %l:%i%p')) as `temp(test)(3929621149)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3929621149)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Apr 20 1977 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Apr 20 1994 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Apr 27 2002 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Aug 12 1998 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Feb 4 2001 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Feb 8 1977 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jan 5 1988 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 12 1972 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 26 1980 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jun 4 1995 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Mar 17 1974 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("May 3 1974 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("May 30 1997 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Nov 7 1980 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sep 19 1997 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sep 3 1995 12:00AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Sep 9 1976 12:00AM");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS454");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS456() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select trim(date_format(`Calcs`.`datetime0`, '%b %e %y %l:%i%p')) as `temp(test)(1103404331)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1103404331)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Aug 2 2004 7:59AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 12 2004 5:30PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 14 2004 7:43AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 14 2004 8:16AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 17 2004 2:01PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 19 2004 10:21PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 22 2004 12:30AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 23 2004 9:13PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 25 2004 3:22PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 26 2004 12:30PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 28 2004 11:30PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 28 2004 12:34PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 28 2004 6:54AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 31 2004 11:57AM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 4 2004 10:49PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 5 2004 1:14PM");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("Jul 9 2004 10:17AM");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS456");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS457() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(296025979)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(296025979)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS457");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS458() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(595744937)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(595744937)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS458");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS459() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(3907469988)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3907469988)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-01-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS459");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS460() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(1153873435)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1153873435)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-01-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS460");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS462() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 year) as `temp(test)(1314023193)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1314023193)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-04 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-05 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-09 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-12 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-14 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-17 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-19 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-22 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-23 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-25 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-26 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-28 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-28 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-28 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-07-31 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2005-08-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS462");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS463() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(3529528921)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3529528921)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS463");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS464() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(1066073186)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1066073186)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS464");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS465() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(from_days(floor(null) + 693961)) - year(from_days(floor(null) + 693961))) as `temp(test)(1128710711)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1128710711)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS465");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS466() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(3816818712)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3816818712)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS466");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS467() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(from_days(floor(null) + 693961)) - year(from_days(floor(null) + 693961)))*4 + (quarter(from_days(floor(null) + 693961)) - quarter(from_days(floor(null) + 693961)))) as `temp(test)(1220694026)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1220694026)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS467");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS468() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*4 + (quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))) as `temp(test)(1878304808)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1878304808)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS468");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS469() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(from_days(floor(null) + 693961)) - year(from_days(floor(null) + 693961)))*12 + (month(from_days(floor(null) + 693961)) - month(from_days(floor(null) + 693961)))) as `temp(test)(3201398499)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3201398499)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS469");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS470() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*12 + (month(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - month(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))) as `temp(test)(2380792894)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2380792894)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS470");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS471() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(from_days(floor(null) + 693961)) - (dayofweek(from_days(floor(null) + 693961)) - 1)) - (to_days(from_days(floor(null) + 693961)) - (dayofweek(from_days(floor(null) + 693961)) - 1) ) )/7) as `temp(test)(1799303116)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1799303116)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS471");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS472() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - (dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1)) - (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - (dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1) ) )/7) as `temp(test)(3424623419)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3424623419)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS472");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS473() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(from_days(floor(null) + 693961)) - to_days(from_days(floor(null) + 693961))) as `temp(test)(496128354)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(496128354)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS473");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS474() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(260207547)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(260207547)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS474");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS475() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(from_days(floor(null) + 693961)) - to_days(from_days(floor(null) + 693961))) as `temp(test)(4282303505)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4282303505)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS475");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS476() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(2339877044)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2339877044)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS476");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS477() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(from_days(floor(null) + 693961)) - to_days(from_days(floor(null) + 693961))) as `temp(test)(3465754358)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3465754358)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS477");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS478() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))) as `temp(test)(2205674587)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2205674587)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS478");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS479() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*24 + floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 3600) - floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 3600)) as `temp(test)(4062119106)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4062119106)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS479");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS480() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*24*60 + floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 60) - floor(time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) / 60)) as `temp(test)(2509274079)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2509274079)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS480");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS481() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)))*24*60*60 + (time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)) - time_to_sec(adddate(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 0 second)))) as `temp(test)(508245917)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(508245917)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS481");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS482() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(from_days(floor(null) + 693961), interval 1 year) as `temp(test)(1053114602)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1053114602)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS482");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS483() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 year) as `temp(test)(955333125)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(955333125)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS483");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS484() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(from_days(floor(null) + 693961), interval (3 * 1) month) as `temp(test)(2396988690)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2396988690)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS484");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS485() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval (3 * 1) month) as `temp(test)(2232502461)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2232502461)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS485");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS486() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(from_days(floor(null) + 693961), interval 1 month) as `temp(test)(109946472)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(109946472)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS486");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS487() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 month) as `temp(test)(2095510626)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2095510626)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS487");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS488() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(from_days(floor(null) + 693961), interval (7 * 1) day) as `temp(test)(359186020)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(359186020)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS488");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS489() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval (7 * 1) day) as `temp(test)(3060670302)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3060670302)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS489");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS490() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(from_days(floor(null) + 693961), interval 1 day) as `temp(test)(592740370)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(592740370)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS490");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS491() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 day) as `temp(test)(4169571243)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4169571243)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS491");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS492() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(from_days(floor(null) + 693961), interval 1 day) as `temp(test)(2477057371)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2477057371)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS492");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS493() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 day) as `temp(test)(3817976182)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3817976182)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS493");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS494() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(from_days(floor(null) + 693961), interval 1 day) as `temp(test)(2329360898)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2329360898)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS494");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS495() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 day) as `temp(test)(1469842605)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1469842605)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS495");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS496() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 hour) as `temp(test)(4189387493)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4189387493)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS496");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS497() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 minute) as `temp(test)(3720439076)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3720439076)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS497");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS498() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), interval 1 second) as `temp(test)(2985757783)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2985757783)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS498");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS499() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select rtrim(concat(concat(' ', `Calcs`.`str2`), ' ')) as `temp(test)(2277366246)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2277366246)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add(" two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS499");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS500() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(now()) - to_days(now())) as `temp(test)(3926981592)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3926981592)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS500");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS501() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(curdate()) - to_days(curdate())) as `temp(test)(1915846221)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1915846221)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS501");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS502() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date2`)) + (time_to_sec(adddate(`Calcs`.`date2`, interval 0 second)) - time_to_sec(adddate(`Calcs`.`date2`, interval 0 second))) / (60 * 60 * 24)) as `temp(test)(1152843842)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1152843842)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS502");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS503() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(`Calcs`.`date2`, interval floor(1) day), interval 60 * 60 * 24 * (1 - floor(1)) second) as `temp(test)(715809068)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(715809068)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-13 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-18 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-10 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-21 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-27 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-06 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-21 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-13 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-28 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS503");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS504() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(`Calcs`.`date2`, interval floor(1.5) day), interval 60 * 60 * 24 * (1.5 - floor(1.5)) second) as `temp(test)(299505631)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(299505631)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-13 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-18 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-04 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-10 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-09 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-21 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-27 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-08 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-06 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-21 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-05 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-04 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-31 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-20 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-13 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-05 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-28 12:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS504");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS505() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_sub(date_sub(`Calcs`.`date2`, interval floor(1) day), interval 60 * 60 * 24 * (1 - floor(1)) second) as `temp(test)(709470143)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(709470143)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-11 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-16 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-02 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-06 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-02 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-29 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-18 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-11 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-26 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS505");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS506() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_sub(date_sub(`Calcs`.`date2`, interval floor(1.5) day), interval 60 * 60 * 24 * (1.5 - floor(1.5)) second) as `temp(test)(1620718980)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1620718980)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-10 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-15 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-01 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-07 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-06 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-18 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-24 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-05 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-03 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-18 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-02 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-01 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-28 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-17 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-10 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-02 12:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-25 12:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS506");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS507() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((to_days(`Calcs`.`datetime0`) - to_days(`Calcs`.`datetime0`)) + (time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second)) - time_to_sec(adddate(`Calcs`.`datetime0`, interval 0 second))) / (60 * 60 * 24)) as `temp(test)(2141740056)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2141740056)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS507");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS508() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_sub(date_sub(`Calcs`.`datetime0`, interval floor(1) day), interval 60 * 60 * 24 * (1 - floor(1)) second) as `temp(test)(1797652325)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1797652325)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-03 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-08 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-11 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-13 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-13 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-16 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-21 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-24 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-30 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS508");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS509() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(`Calcs`.`datetime0`, interval floor(1) day), interval 60 * 60 * 24 * (1 - floor(1)) second) as `temp(test)(2686481578)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2686481578)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-06 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-10 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-13 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-20 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-24 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-03 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS509");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS510() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_sub(date_sub(`Calcs`.`datetime0`, interval floor(1.5) day), interval 60 * 60 * 24 * (1.5 - floor(1.5)) second) as `temp(test)(2341796372)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2341796372)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-03 10:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 01:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-07 22:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-11 05:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 19:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 20:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-16 02:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 10:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-20 12:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 09:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-24 03:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 18:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 00:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 11:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 23:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 19:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS510");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS511() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(date_add(`Calcs`.`datetime0`, interval floor(1.5) day), interval 60 * 60 * 24 * (1.5 - floor(1.5)) second) as `temp(test)(4017290474)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4017290474)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-06 10:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-07 01:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-10 22:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 05:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 19:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 20:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 02:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-21 10:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 12:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 09:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 03:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 18:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-30 00:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-30 11:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 23:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-03 19:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS511");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS512() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`datetime0` = `Calcs`.`datetime0`) as `temp(test)(3033382267)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3033382267)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS512");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS513() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`datetime0` > `Calcs`.`datetime0`) as `temp(test)(4196472080)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4196472080)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS513");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS514() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`datetime0` >= `Calcs`.`datetime0`) as `temp(test)(1829388090)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1829388090)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS514");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS515() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`datetime0` < `Calcs`.`datetime0`) as `temp(test)(2087345109)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2087345109)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS515");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS516() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`datetime0` <= `Calcs`.`datetime0`) as `temp(test)(3187080314)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3187080314)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS516");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS517() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`datetime0` <> `Calcs`.`datetime0`) as `temp(test)(436529008)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(436529008)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS517");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS518() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` = `Calcs`.`datetime0`) as `temp(test)(1122166960)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1122166960)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS518");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS519() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` > `Calcs`.`datetime0`) as `temp(test)(2476649334)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2476649334)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS519");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS520() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` >= `Calcs`.`datetime0`) as `temp(test)(1267352367)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1267352367)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS520");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS521() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` < `Calcs`.`datetime0`) as `temp(test)(668774393)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(668774393)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS521");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS522() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` <= `Calcs`.`datetime0`) as `temp(test)(2801366337)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2801366337)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS522");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS523() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` <> `Calcs`.`datetime0`) as `temp(test)(6065346)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(6065346)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS523");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS524() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` = `Calcs`.`date2`) as `temp(test)(4213376628)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4213376628)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS524");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS525() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` > `Calcs`.`date2`) as `temp(test)(284925583)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(284925583)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS525");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS526() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` >= `Calcs`.`date2`) as `temp(test)(1365124261)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1365124261)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS526");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS527() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` < `Calcs`.`date2`) as `temp(test)(4277161941)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4277161941)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS527");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS528() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` <= `Calcs`.`date2`) as `temp(test)(932571096)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(932571096)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS528");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS529() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`date2` <> `Calcs`.`date2`) as `temp(test)(3666462064)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3666462064)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS529");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS530() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(402015915)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(402015915)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS530");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS531() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3033426574)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3033426574)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS531");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS532() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select min(`Calcs`.`int0`) as `temp(test)(4016644369)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4016644369)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS532");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS533() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`int1`) then null 	when isnull(`Calcs`.`int2`) then null 	else least(`Calcs`.`int1`, `Calcs`.`int2`) end) as `temp(test)(1701645592)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1701645592)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS533");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS534() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(433583207)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(433583207)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-01-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS534");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS535() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(1289371916)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1289371916)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-01-01 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-01-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS535");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS536() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(3917841362)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3917841362)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-01-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS536");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS537() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(1921815362)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1921815362)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-01-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS537");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS541() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(from_days(floor(null) + 693961)) as `temp(test)(513464674)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(513464674)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS541");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS542() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3512378422)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3512378422)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS542");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS543() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3084524178)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3084524178)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS543");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS544() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(from_days(floor(null) + 693961)) as `temp(test)(4202902840)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4202902840)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS544");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS545() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2836269094)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2836269094)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS545");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS546() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(from_days(floor(null) + 693961)) as `temp(test)(3924648662)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3924648662)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS546");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS547() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(from_days(floor(null) + 693961)) - 1 + dayofweek(date_format(from_days(floor(null) + 693961), '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(1538264184)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1538264184)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS547");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS548() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((7 + dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1 + dayofweek(date_format(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-01-01 00:00:00')) - 1) / 7) as `temp(test)(4042104093)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4042104093)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS548");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS549() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(from_days(floor(null) + 693961)) as `temp(test)(4271712345)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4271712345)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS549");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS550() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(963247111)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(963247111)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS550");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS551() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(738426766)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(738426766)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS551");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS552() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(from_days(floor(null) + 693961)) as `temp(test)(1202522493)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1202522493)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS552");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS553() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(1255819744)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1255819744)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS553");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS554() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(from_days(floor(null) + 693961)) as `temp(test)(1639804515)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1639804515)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS554");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS555() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select hour(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(299943486)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(299943486)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS555");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS556() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(4177149407)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4177149407)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS556");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS557() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(1457324017)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1457324017)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS557");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS559() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(distinct `Calcs`.`int0`) as `temp(test)(1467453495)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1467453495)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS559");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS560() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(distinct (`Calcs`.`bool0` <> 0)) as `temp(test)(1408008556)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1408008556)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS560");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS561() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(distinct `Calcs`.`date3`) as `temp(test)(175600811)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(175600811)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS561");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS562() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(distinct `Calcs`.`num4`) as `temp(test)(41874160)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(41874160)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS562");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS563() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select count(distinct `Calcs`.`str2`) as `temp(test)(2954817995)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2954817995)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS563");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS564() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3715775174)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3715775174)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS564");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS565() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(2815480624)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2815480624)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS565");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS566() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3738830082)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3738830082)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS566");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS567() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(151653785)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(151653785)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS567");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS568() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(1373895161)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1373895161)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS568");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS569() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(543203842)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(543203842)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS569");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS570() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(`Calcs`.`datetime0`) as `temp(test)(3325657342)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3325657342)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("49");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("54");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("59");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS570");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS571() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(`Calcs`.`int1`) as `temp(test)(2617331766)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2617331766)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS571");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS572() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when (`Calcs`.`bool0` <> 0) then '1' 	when not (`Calcs`.`bool0` <> 0) then '0' 	else null end) as `temp(test)(3200082645)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3200082645)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(3);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS572");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS573() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(`Calcs`.`num2`) as `temp(test)(3049448927)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3049448927)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.98");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11.69");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13.04");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.73");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17.86");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.79");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.46");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7.87");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.51");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.98");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS573");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS574() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select substring(`Calcs`.`str2`, 1, 1024) as `temp(test)(3494867617)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3494867617)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fifteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("five");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS574");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS575() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(`Calcs`.`date2`) as `temp(test)(1660803953)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1660803953)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("April");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("August");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("February");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("January");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("July");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("June");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("March");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("May");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("November");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("September");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS575");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS576() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(`Calcs`.`date2`) as `temp(test)(872696424)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(872696424)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("April");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("August");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("February");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("January");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("July");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("June");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("March");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("May");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("November");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("September");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS576");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS577() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(`Calcs`.`datetime0`) as `temp(test)(732183378)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(732183378)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("August");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("July");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS577");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS578() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(`Calcs`.`datetime0`) as `temp(test)(3816689092)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3816689092)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("August");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("July");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS578");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS579() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(`Calcs`.`date2`) as `temp(test)(2634030884)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2634030884)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS579");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS580() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(`Calcs`.`datetime0`) as `temp(test)(4000895377)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4000895377)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS580");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS582() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 month) as `temp(test)(1378354598)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1378354598)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-04 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-05 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-09 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-12 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-14 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-17 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-19 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-22 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-23 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-25 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-26 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-28 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-28 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-28 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-31 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-09-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS582");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS583() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(from_days(floor(null) + 693961)) as `temp(test)(3057229987)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3057229987)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS583");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS584() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(4063654893)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4063654893)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS584");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS585() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(from_days(floor(null) + 693961)) as `temp(test)(2102858309)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2102858309)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS585");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS586() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3270121971)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3270121971)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS586");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS587() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(from_days(floor(null) + 693961)) as `temp(test)(2692233594)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2692233594)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS587");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS588() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select monthname(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(1772891037)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1772891037)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS588");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS589() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(from_days(floor(null) + 693961)) - 1 + dayofweek(date_format(from_days(floor(null) + 693961), '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(3926284460)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3926284460)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS589");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS590() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select concat(floor((7 + dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1 + dayofweek(date_format(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-01-01 00:00:00')) - 1) / 7)) as `temp(test)(1415178918)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1415178918)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS590");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS591() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(from_days(floor(null) + 693961)) as `temp(test)(3608467423)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3608467423)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS591");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS592() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayname(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2920782836)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2920782836)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS592");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS593() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(from_days(floor(null) + 693961)) as `temp(test)(3132873078)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3132873078)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS593");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS594() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofmonth(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2450943592)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2450943592)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS594");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS595() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(from_days(floor(null) + 693961)) as `temp(test)(3530921297)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3530921297)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS595");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS596() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(304383277)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(304383277)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS596");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS597() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select hour(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3871589708)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3871589708)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS597");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS598() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(2462406212)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2462406212)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS598");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS599() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select second(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) as `temp(test)(3443263072)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3443263072)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS599");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS600() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:%i:00' ), interval 0 second ) as `temp(test)(1349416314)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1349416314)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS600");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS601() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d %h:%i:00' ), interval 0 second ) as `temp(test)(3032747293)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3032747293)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 22:49:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 13:14:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 10:17:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 17:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:16:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 14:01:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 22:21:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 21:13:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 15:22:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 12:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 06:54:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 12:34:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 23:30:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 11:57:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS601");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS603() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval (7 * 1) day) as `temp(test)(3880453047)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3880453047)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-11 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-16 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-21 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-21 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-24 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-30 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-04 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-04 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-04 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-07 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-09 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS603");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS604() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`date2`) as `temp(test)(877816921)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(877816921)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(16);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("39");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("76");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("110");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("117");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("123");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("150");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("155");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("224");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("246");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("253");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("262");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("312");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS604");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS605() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select dayofyear(`Calcs`.`datetime0`) as `temp(test)(707037378)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(707037378)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("186");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("187");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("191");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("194");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("196");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("199");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("201");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("204");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("205");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("207");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("208");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("210");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("213");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("215");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS605");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS606() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`date2`) - year(`Calcs`.`date3`))*4 + (quarter(`Calcs`.`date2`) - quarter(`Calcs`.`date3`))) as `temp(test)(3028875325)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3028875325)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-102");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS606");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS607() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`date2`) - year(`Calcs`.`date3`))*4 + (quarter(`Calcs`.`date2`) - quarter(`Calcs`.`date3`))) as `temp(test)(3483942593)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3483942593)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-102");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-27");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS607");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS608() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`)))*4 + (quarter(`Calcs`.`datetime0`) - quarter(timestamp(`Calcs`.`date2`)))) as `temp(test)(4196684004)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4196684004)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("66");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("95");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("96");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("109");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("110");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("112");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("121");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("122");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("128");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS608");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS609() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select ((year(`Calcs`.`datetime0`) - year(timestamp(`Calcs`.`date2`)))*4 + (quarter(`Calcs`.`datetime0`) - quarter(timestamp(`Calcs`.`date2`)))) as `temp(test)(351668681)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(351668681)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("24");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("41");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("66");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("95");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("96");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("109");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("110");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("112");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("121");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("122");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("128");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS609");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS611() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 day) as `temp(test)(748109579)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(748109579)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 22:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-06 13:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-10 10:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-13 17:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 07:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-15 08:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-18 14:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-20 22:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-24 21:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 15:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-27 12:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 06:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 12:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 23:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-01 11:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-03 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS611");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS612() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(`Calcs`.`date2`) - (dayofweek(`Calcs`.`date2`) - 1)) - (to_days(`Calcs`.`date3`) - (dayofweek(`Calcs`.`date3`) - 1) ) )/7) as `temp(test)(859582235)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(859582235)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1326");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-747");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-465");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-436");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-350");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("64");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("83");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("536");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS612");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS613() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(`Calcs`.`datetime0`) - (dayofweek(`Calcs`.`datetime0`) - 1)) - (to_days(timestamp(`Calcs`.`date2`)) - (dayofweek(timestamp(`Calcs`.`date2`)) - 1) ) )/7) as `temp(test)(2079052241)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2079052241)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("118");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("179");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("310");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("359");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("374");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("464");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("475");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("536");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("863");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1237");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1250");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1420");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1433");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1452");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1576");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1582");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1672");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS613");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS614() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select abs(`Calcs`.`int2`) as `temp(test)(2102582873)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2102582873)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS614");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS615() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select abs(`Calcs`.`num0`) as `temp(test)(3816473022)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3816473022)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15.7");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS615");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS616() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(1942031084)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1942031084)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS616");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS617() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`date2`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(308042462)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(308042462)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-03-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974-05-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976-09-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-02-08 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980-11-07 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988-01-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994-04-20 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-06-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995-09-03 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-05-30 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997-09-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998-08-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001-02-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002-04-27 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS617");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS618() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(1290354772)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1290354772)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS618");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS619() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( `Calcs`.`datetime0`, '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(2022110629)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2022110629)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 00:00:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS619");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS620() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select if(isnull(((`Calcs`.`num0` + 5) * 0.29999999999999999)), null, substring(`Calcs`.`str2`,greatest(1,floor(((`Calcs`.`num0` + 5) * 0.29999999999999999))),floor(`Calcs`.`num1`))) as `temp(test)(1934432200)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1934432200)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("e");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ive");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS620");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS621() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select minute(`Calcs`.`datetime0`) as `temp(test)(1256004566)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1256004566)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(14);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("13");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("14");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("21");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("30");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("43");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("49");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("54");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("57");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("59");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS621");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS622() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (((case when (abs((2) - (round( ( (2) / sqrt(3.0) ), 0 ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((`Calcs`.`int2`) - (round( ( (`Calcs`.`int2`) / 3.0 ), 0 ) * 3.0))) - 1.0) > 0.0 then 1.5 else 0.0 end) - (case when ((`Calcs`.`int2`) - (round( ( (`Calcs`.`int2`) / 3.0 ), 0 ) * 3.0) < 0.0) and ((case when (abs((2) - (round( ( (2) / sqrt(3.0) ), 0 ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((`Calcs`.`int2`) - (round( ( (`Calcs`.`int2`) / 3.0 ), 0 ) * 3.0))) - 1.0) > 0.0 then sqrt(3.0) / 2.0 else 0.0 end) > 0.0) then 3.0 else 0.0 end)) + (round( ( (`Calcs`.`int2`) / 3.0 ), 0 ) * 3.0)) as `temp(test)(2503102272)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2503102272)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(11);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-7.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS622");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS623() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select round( (((case when (abs((2) - (round( ( (2) / sqrt(3.0) ), 0 ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((`Calcs`.`int2`) - (round( ( (`Calcs`.`int2`) / 3.0 ), 0 ) * 3.0))) - 1.0) > 0.0 then sqrt(3.0) / 2.0 else 0.0 end) - (case when ((2) - (round( ( (2) / sqrt(3.0) ), 0 ) * sqrt(3.0)) < 0.0) and ((case when (abs((2) - (round( ( (2) / sqrt(3.0) ), 0 ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((`Calcs`.`int2`) - (round( ( (`Calcs`.`int2`) / 3.0 ), 0 ) * 3.0))) - 1.0) > 0.0 then sqrt(3.0) / 2.0 else 0.0 end) > 0.0) then sqrt(3.0) else 0.0 end)) + (round( ( (2) / sqrt(3.0) ), 0 ) * sqrt(3.0))), 3) as `temp(test)(2977666156)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2977666156)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1.732");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.598");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS623");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS624() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select timestamp(str_to_date('1234-06-01', '%y-%m-%d')) as `temp(test)(1408155083)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1408155083)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1234-06-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS624");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS625() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select timestamp(str_to_date('12-06-01', '%y-%m-%d')) as `temp(test)(54082523)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(54082523)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2012-06-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS625");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS626() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select timestamp(str_to_date('1234-06-01', '%y-%m-%d')) as `temp(test)(2040050501)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2040050501)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1234-06-01 00:00:00");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS626");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS631() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select 1 as `temp(test)(3252316215)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3252316215)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS631");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS632() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (left(`Calcs`.`str1`, length('bi')) = 'bi') as `temp(test)(535799381)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(535799381)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS632");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS633() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (left(`Calcs`.`str1`, length(`Calcs`.`str2`)) = `Calcs`.`str2`) as `temp(test)(2377293421)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2377293421)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS633");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS636() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select max(`Calcs`.`datetime0`) as `temp(test)(4035984656)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4035984656)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 07:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS636");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS637() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(840463993)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(840463993)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS637");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS638() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(1720545932)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1720545932)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS638");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS639() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(840463993)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(840463993)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS639");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS640() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(1720545932)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1720545932)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS640");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS641() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(2707942807)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2707942807)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS641");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS642() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(3474280307)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3474280307)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS642");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS643() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(2707942807)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2707942807)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS643");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS644() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(3474280307)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3474280307)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS644");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS645() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(`Calcs`.`date2`) as `temp(test)(1671202742)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1671202742)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS645");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS646() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(`Calcs`.`date2`) as `temp(test)(536615588)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(536615588)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS646");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS647() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(`Calcs`.`datetime0`) as `temp(test)(1933085624)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1933085624)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS647");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS648() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select month(`Calcs`.`datetime0`) as `temp(test)(2986113344)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2986113344)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(2);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS648");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS649() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int2` div 2) as `temp(test)(266359676)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(266359676)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS649");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS650() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int0` div `Calcs`.`int1`) as `temp(test)(2600727600)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2600727600)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS650");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS651() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int0` div `Calcs`.`int1`) as `temp(test)(2600727600)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2600727600)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS651");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS652() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int3` div `Calcs`.`int2`) as `temp(test)(3955107424)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3955107424)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS652");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS653() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (`Calcs`.`int3` div `Calcs`.`int2`) as `temp(test)(3955107424)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3955107424)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS653");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS656() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select power(`Calcs`.`int2`, 2) as `temp(test)(3898674109)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3898674109)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("36");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("64");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("81");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS656");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS657() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select power(`Calcs`.`num0`, 2) as `temp(test)(1119897860)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1119897860)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.25");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("100.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("151.29");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("246.49");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS657");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS658() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(3311335472)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3311335472)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS658");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS659() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-01-01 00:00:00' ), interval 0 second ) as `temp(test)(1982106892)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1982106892)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS659");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS660() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( from_days(floor(null) + 693961), '%y-' ), (3*(quarter(from_days(floor(null) + 693961))-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(2616948526)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2616948526)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS660");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS661() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( concat( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-' ), (3*(quarter(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second))-1)+1), '-01 00:00:00' ), interval 0 second ) as `temp(test)(4099405891)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4099405891)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS661");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS662() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(1303420554)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1303420554)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS662");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS663() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-01 00:00:00' ), interval 0 second ) as `temp(test)(1705284026)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1705284026)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS663");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS664() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - (dayofweek(date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second)) - 1) ), interval 0 second ) as `temp(test)(2964540366)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2964540366)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS664");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS665() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate(from_days( to_days(from_days(floor(null) + 693961)) - (dayofweek(from_days(floor(null) + 693961)) - 1) ), interval 0 second ) as `temp(test)(3523871008)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3523871008)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS665");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS666() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3587526928)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3587526928)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS666");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS667() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(2715649251)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2715649251)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS667");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS668() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(3912893816)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3912893816)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS668");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS669() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(453060606)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(453060606)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS669");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS670() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( from_days(floor(null) + 693961), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(1466575961)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1466575961)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS670");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS671() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d 00:00:00' ), interval 0 second ) as `temp(test)(265878863)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(265878863)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS671");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS672() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d %h:00:00' ), interval 0 second ) as `temp(test)(3877847632)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3877847632)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS672");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS673() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d %h:%i:00' ), interval 0 second ) as `temp(test)(263614731)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(263614731)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS673");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS674() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select adddate( date_format( date_add(from_days(floor(null) + 693961), interval 60 * 60 * 24 * (null - floor(null)) second), '%y-%m-%d %h:%i:%s' ), interval 0 second ) as `temp(test)(864002214)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(864002214)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS674");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS678() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(1876737518)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1876737518)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS678");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS679() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(1437280163)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1437280163)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS679");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS680() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(3178513645)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3178513645)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS680");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS681() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(3727444777)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3727444777)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS681");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS682() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select date_add(`Calcs`.`datetime0`, interval 1 hour) as `temp(test)(4261466899)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4261466899)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-04 23:49:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-05 14:14:20");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-09 11:17:35");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-12 18:30:16");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 08:43:00");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-14 09:16:44");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-17 15:01:56");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-19 23:21:31");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-22 01:30:23");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-23 22:13:37");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-25 16:22:26");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-26 13:30:34");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 07:54:50");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-28 13:34:28");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-29 00:30:22");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-07-31 12:57:52");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004-08-02 08:59:23");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS682");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS683() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select max(`Calcs`.`int0`) as `temp(test)(56370746)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(56370746)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS683");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS685() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select max(`Calcs`.`num4`) as `temp(test)(4154938655)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4154938655)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19.39");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS685");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS686() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select max(`Calcs`.`str2`) as `temp(test)(1812249092)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1812249092)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS686");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS687() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`int0`) then null 	when isnull(`Calcs`.`int1`) then null 	else greatest(`Calcs`.`int0`, `Calcs`.`int1`) end) as `temp(test)(1523549003)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1523549003)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS687");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS688() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select locate('ee',`Calcs`.`str2`) as `temp(test)(3981629397)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3981629397)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS688");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS689() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select locate('e',`Calcs`.`str1`) as `temp(test)(257220821)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(257220821)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(8);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS689");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS690() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select if(isnull(6), null, locate('e',`Calcs`.`str1`,greatest(1,floor(6)))) as `temp(test)(282093116)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(282093116)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("15");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("17");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS690");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS691() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select locate(`Calcs`.`str3`,`Calcs`.`str2`) as `temp(test)(3096760581)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3096760581)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(7);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS691");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS692() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select if(isnull((`Calcs`.`num4` * 0.20000000000000001)), null, locate(`Calcs`.`str3`,`Calcs`.`str2`,greatest(1,floor((`Calcs`.`num4` * 0.20000000000000001))))) as `temp(test)(2787932066)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2787932066)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS692");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS693() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(838791689)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(838791689)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS693");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS694() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`date2`) - to_days(`Calcs`.`date3`)) as `temp(test)(1647283678)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1647283678)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9287");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5232");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3256");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3051");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-2446");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("229");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("449");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("586");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3752");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS694");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS695() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(1719292105)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1719292105)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS695");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS696() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (to_days(`Calcs`.`datetime0`) - to_days(timestamp(`Calcs`.`date2`))) as `temp(test)(1567002572)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1567002572)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("823");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1259");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2172");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2509");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2616");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3249");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3328");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3749");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6040");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8658");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8745");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9942");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10032");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10160");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11028");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11077");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11707");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS696");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS697() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select min(`Calcs`.`int0`) as `temp(test)(4016644369)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4016644369)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS697");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS699() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select min(`Calcs`.`num4`) as `temp(test)(512350875)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(512350875)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14.21");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS699");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS700() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select min(`Calcs`.`str2`) as `temp(test)(3910790823)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3910790823)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS700");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS701() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`int0`) then null 	when isnull(`Calcs`.`int1`) then null 	else least(`Calcs`.`int0`, `Calcs`.`int1`) end) as `temp(test)(3683900016)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3683900016)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(5);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS701");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS702() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select max(`Calcs`.`int0`) as `temp(test)(56370746)(0)` from `Calcs` having (count(1) > 0)      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(56370746)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("11");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS702");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS703() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select (case 	when isnull(`Calcs`.`int1`) then null 	when isnull(`Calcs`.`int2`) then null 	else greatest(`Calcs`.`int1`, `Calcs`.`int2`) end) as `temp(test)(2763474205)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2763474205)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS703");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS704() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(3969685894)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3969685894)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS704");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS705() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`date2`) as `temp(test)(3969685894)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3969685894)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(12);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1972");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1974");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1976");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1977");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1980");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1988");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1994");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1995");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1997");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1998");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2001");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2002");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS705");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS706() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(4179095987)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4179095987)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS706");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS707() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select year(`Calcs`.`datetime0`) as `temp(test)(4179095987)(1)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(4179095987)(1)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("int"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2004");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS707");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS708() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select round(`Calcs`.`int2`) as `temp(test)(366741644)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(366741644)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS708");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS709() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select round(`Calcs`.`int2`,2) as `temp(test)(1240237577)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1240237577)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-9.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-8.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-5.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("2.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("5.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("9.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS709");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS710() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select round(`Calcs`.`num0`) as `temp(test)(3892529067)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3892529067)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(9);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-16.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-12.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("0.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("12.0");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("16.0");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS710");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS711() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select round(`Calcs`.`num4`,1) as `temp(test)(2722044748)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2722044748)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(13);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-14.2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-13.5");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-10.2");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-6.1");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.4");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("3.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("6.8");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("8.3");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.7");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("10.9");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("19.4");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS711");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS712() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(`Calcs`.`date2`) - ((7 + dayofweek(`Calcs`.`date2`) - 2) % 7)) - (to_days(`Calcs`.`date3`) - ((7 + dayofweek(`Calcs`.`date3`) - 2) % 7) ) )/7) as `temp(test)(3550551924)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(3550551924)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1327");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-747");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-465");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-436");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-349");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("33");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("64");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("84");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("536");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS712");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS713() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(`Calcs`.`date2`) - (dayofweek(`Calcs`.`date2`) - 1)) - (to_days(`Calcs`.`date3`) - (dayofweek(`Calcs`.`date3`) - 1) ) )/7) as `temp(test)(2745903531)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(2745903531)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-1326");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-747");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-465");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-436");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("-350");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("32");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("64");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("83");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("536");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS713");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS714() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(`Calcs`.`datetime0`) - ((7 + dayofweek(`Calcs`.`datetime0`) - 2) % 7)) - (to_days(timestamp(`Calcs`.`date2`)) - ((7 + dayofweek(timestamp(`Calcs`.`date2`)) - 2) % 7) ) )/7) as `temp(test)(1341534691)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1341534691)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("118");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("180");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("310");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("359");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("374");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("465");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("476");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("535");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("863");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1237");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1250");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1420");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1433");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1451");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1576");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1583");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1672");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS714");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testCALCS715() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "       select floor((( to_days(`Calcs`.`datetime0`) - (dayofweek(`Calcs`.`datetime0`) - 1)) - (to_days(timestamp(`Calcs`.`date2`)) - (dayofweek(timestamp(`Calcs`.`date2`)) - 1) ) )/7) as `temp(test)(1157868287)(0)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("temp(test)(1157868287)(0)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(17);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("118");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("179");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("310");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("359");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("374");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("464");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("475");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("536");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("863");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1237");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1250");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1420");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1433");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1452");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1576");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1582");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("1672");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================CALCS715");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testLOGICAL_CALCS3() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "            select (case when (`Calcs`.`str2` in ('eleven', 'fifteen', 'five', 'fourteen', 'nine', 'one', 'six', 'sixteen', 'ten', 'three', 'twelve')) then 'eleven' else `Calcs`.`str2` end) as `str2 (group)` from `Calcs` group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("str2 (group)", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(4);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eight");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("eleven");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================LOGICAL_CALCS3");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testLOGICAL_CALCS4() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "            select `Calcs`.`str2` as `str2` from `Calcs` where ((not ((`Calcs`.`str2` >= 'eight') and (`Calcs`.`str2` <= 'six'))) or isnull(`Calcs`.`str2`)) group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("str2", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(6);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================LOGICAL_CALCS4");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testLOGICAL_CALCS8() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "            select `Calcs`.`str2` as `str2` from `Calcs` where ((not (`Calcs`.`str2` in ('eight', 'eleven', 'fifteen', 'five'))) or isnull(`Calcs`.`str2`)) group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("str2", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(10);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add(null);
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("fourteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("nine");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("one");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("six");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("sixteen");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("ten");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("three");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("twelve");
        expected.add(expectedRow);
        expectedRow = new ArrayList<>(1);
        expectedRow.add("two");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================LOGICAL_CALCS8");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testLOGICAL_CALCS10() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "            select `Calcs`.`str0` as `str0` from `Calcs`   inner join (   select `Calcs`.`str0` as `str0`,     sum(`Calcs`.`int2`) as `$__alias__0`   from `Calcs`   where ((`Calcs`.`str0` >= 'furniture') and (`Calcs`.`str0` <= 'technology'))   group by 1   order by `$__alias__0` desc   limit 2 ) `t0` on (`Calcs`.`str0` = `t0`.`str0`)   inner join (   select `Calcs`.`str1` as `str1`,     sum(`Calcs`.`int1`) as `$__alias__1`   from `Calcs`   where (((`Calcs`.`str1` >= 'air purifiers') and (`Calcs`.`str1` <= 'cd-r media')) or ((`Calcs`.`str1` >= 'conference phones') and (`Calcs`.`str1` <= 'ericsson')))   group by 1   order by `$__alias__1` desc   limit 5 ) `t1` on (`Calcs`.`str1` = `t1`.`str1`) group by 1      order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("str0", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("string"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("OFFICE SUPPLIES");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================LOGICAL_CALCS10");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }

    @Test
    public void testLOGICAL_STAPLES28() throws SQLException {
        Connection conn = getBasicConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs =
                stmt.executeQuery(
                        "select sum((`Staples`.`Price` / 1.1000000000000001)) as `sum_calculation_555068687593533440_ok`from `Staples` having (count(1) > 0) order by 1");
        ResultSetMetaData rsmd = rs.getMetaData();
        assertEquals("sum_calculation_555068687593533440_ok", rsmd.getColumnLabel(1));
        String tyName;
        tyName = rsmd.getColumnTypeName(1);
        assertTrue("failed type check", tyName.equals("null") || tyName.equals("double"));
        HashSet<ArrayList<String>> expected = new HashSet<>(1);
        ArrayList<String> expectedRow;
        expectedRow = new ArrayList<>(1);
        expectedRow.add("4275856.2");
        expected.add(expectedRow);
        HashSet<ArrayList<String>> rsSet = buildResultSetSet(rs);
        System.out.println("==============================LOGICAL_STAPLES28");
        System.out.println(expected.toString());
        System.out.println(rsSet.toString());
        // This will be false if both HashSets are the same
        assertFalse("failed result check", rsSet.retainAll(expected));
    }
}
