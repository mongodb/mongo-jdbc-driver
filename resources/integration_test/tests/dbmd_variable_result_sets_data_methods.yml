tests:
  # getCatalogs()
  - description: getCatalogs_returns_all_databases
    db: integration_test
    meta_function: [getCatalogs]
    expected_result:
      - [db2]
      - [integration_test]
    row_count: 2
    ordered: true
    expected_sql_type: [LONGVARCHAR]
    expected_bson_type: [ string ]
    expected_catalog_name: ['']
    expected_column_class_name: [java.lang.String]
    expected_column_label: [TABLE_CAT]
    expected_column_display_size: [0]
    expected_precision: [0]
    expected_scale: [0]
    expected_schema_name: ['']
    expected_is_auto_increment: [false]
    expected_is_case_sensitive: [true]
    expected_is_currency: [false]
    expected_is_definitely_writable: [false]
    expected_is_nullable: [columnNoNulls]
    expected_is_read_only: [true]
    expected_is_searchable: [true]
    expected_is_signed: [false]
    expected_is_writable: [false]

  # getTables(catalog, schemaPattern, tableNamePattern, types)
  - description: getTables_resultset_metadata_validation
    db: integration_test
    meta_function: [ getTables, null, null, '%', null ]
    expected_sql_type: [ LONGVARCHAR, LONGVARCHAR, LONGVARCHAR, LONGVARCHAR, LONGVARCHAR,
                         LONGVARCHAR, LONGVARCHAR, LONGVARCHAR, LONGVARCHAR, LONGVARCHAR ]
    expected_bson_type: [ string, string, string, string, string, string, string, string,
                          string, string ]
    expected_catalog_name: [ '', '', '', '', '', '', '', '', '', '' ]
    expected_column_class_name: [ java.lang.String, java.lang.String, java.lang.String,
                                  java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String,
                                  java.lang.String, java.lang.String ]
    expected_column_label: [ TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS,
                             TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION ]
    expected_column_display_size: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    expected_precision: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    expected_scale: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    expected_schema_name: [ '', '', '', '', '', '', '', '', '', '' ]
    expected_is_auto_increment: [ false, false, false, false, false, false, false,
                                  false, false, false ]
    expected_is_case_sensitive: [ true, true, true, true, true, true, true, true, true,
                                  true ]
    expected_is_currency: [ false, false, false, false, false, false, false, false,
                            false, false ]
    expected_is_definitely_writable: [ false, false, false, false, false, false, false,
                                       false, false, false ]
    #skip_reason: "SQL-669: incorrect column nullability."
    #expected_is_nullable: [ columnNullable, columnNullable, columnNullable, columnNoNulls,
    #                        columnNoNulls, columnNullable, columnNoNulls, columnNullable, columnNullable, columnNullable ]
    expected_is_read_only: [ true, true, true, true, true, true, true, true, true,
                             true ]
    expected_is_searchable: [ true, true, true, true, true, true, true, true, true,
                              true ]
    expected_is_signed: [ false, false, false, false, false, false, false, false, false,
                          false ]
    expected_is_writable: [ false, false, false, false, false, false, false, false,
                              false, false ]

  - description: getTables_null_parameters_returns_all_tables
    db: integration_test
    meta_function: [ getTables, null, null, null, null ]
    expected_result:
      - [db2, null, foo, table, null, null, null, null, null, null]
      - [integration_test, null, a_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, any_collection, table, null, null, null, null, null,
         null]
      - [integration_test, null, anyof_collection, table, null, null, null, null,
         null, null]
      - [integration_test, null, b_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, bar, table, null, null, null, null, null, null]
      - [integration_test, null, class, table, null, null, null, null, null, null]
      - [integration_test, null, foo, table, null, null, null, null, null, null]
      - [integration_test, null, grades, table, null, null, null, null, null, null]
      - [integration_test, null, null_and_missing, table, null, null, null, null,
         null, null]
      - [ integration_test, null, types_other, table, null, null, null, null,
          null, null ]
      - [integration_test, null, baz, view, null, null, null, null, null, null]
    row_count: 12

  - description: getTables_no_filters_returns_all_tables
    db: integration_test
    meta_function: [getTables, null, null, '%', null]
    expected_result:
      - [db2, null, foo, table, null, null, null, null, null, null]
      - [integration_test, null, a_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, any_collection, table, null, null, null, null, null,
         null]
      - [integration_test, null, anyof_collection, table, null, null, null, null,
         null, null]
      - [integration_test, null, b_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, bar, table, null, null, null, null, null, null]
      - [integration_test, null, class, table, null, null, null, null, null, null]
      - [integration_test, null, foo, table, null, null, null, null, null, null]
      - [integration_test, null, grades, table, null, null, null, null, null, null]
      - [integration_test, null, null_and_missing, table, null, null, null, null,
         null, null]
      - [ integration_test, null, types_other, table, null, null, null, null,
          null, null ]
      - [integration_test, null, baz, view, null, null, null, null, null, null]
    row_count: 12
    ordered: true

  - description: getTables_catalog_filter_only_returns_matching_tables
    db: integration_test
    meta_function: [getTables, integration_test, null, '%', null]
    expected_result:
      - [integration_test, null, a_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, any_collection, table, null, null, null, null, null,
         null]
      - [integration_test, null, anyof_collection, table, null, null, null, null,
         null, null]
      - [integration_test, null, b_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, bar, table, null, null, null, null, null, null]
      - [integration_test, null, class, table, null, null, null, null, null, null]
      - [integration_test, null, foo, table, null, null, null, null, null, null]
      - [integration_test, null, grades, table, null, null, null, null, null, null]
      - [integration_test, null, null_and_missing, table, null, null, null, null,
         null, null]
      - [ integration_test, null, types_other, table, null, null, null, null,
          null, null ]
      - [integration_test, null, baz, view, null, null, null, null, null, null]
    row_count: 11
    ordered: true


  - description: getTables_catalog_and_table_filters_only_returns_matching_tables
    db: integration_test
    meta_function: [getTables, integration_test, null, b%, null]
    expected_result:
      - [integration_test, null, b_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, bar, table, null, null, null, null, null, null]
      - [integration_test, null, baz, view, null, null, null, null, null, null]
    row_count: 3
    ordered: true

  - description: getTables_catalog,_table,_and_type_filters_only_returns_matching_tables_(views)
    db: integration_test
    meta_function:
      - getTables
      - integration_test
      - null
      - b%
      - [view]
    expected_result:
      - [integration_test, null, baz, view, null, null, null, null, null, null]
    row_count: 1
    ordered: true

  - description: getTables_catalog,_table,_and_type_filters_only_returns_matching_tables_(tables)
    db: integration_test
    meta_function:
      - getTables
      - integration_test
      - null
      - b%
      - [table]
    expected_result:
      - [integration_test, null, b_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, bar, table, null, null, null, null, null, null]
    row_count: 2
    ordered: true

  - description: getTables_catalog,_table,_and_type_filters_only_returns_matching_tables_(both)
    db: integration_test
    meta_function:
      - getTables
      - integration_test
      - null
      - b%
      - [view, table]
    expected_result:
      - [integration_test, null, b_non_lexicographic_field_order, table, null, null,
         null, null, null, null]
      - [integration_test, null, bar, table, null, null, null, null, null, null]
      - [integration_test, null, baz, view, null, null, null, null, null, null]
    row_count: 3
    ordered: true

  # getTablePrivileges(catalog, schemaPattern, tableNamePattern)
  - description: getTablePrivileges_resultset_metadata_validation
    db: integration_test
    meta_function: [getTablePrivileges, null, null, '%']
    expected_sql_type: [LONGVARCHAR, LONGVARCHAR, LONGVARCHAR, LONGVARCHAR, LONGVARCHAR,
                        LONGVARCHAR, LONGVARCHAR]
    expected_bson_type: [string, string, string, string, string, string, string]
    expected_catalog_name: ['', '', '', '', '', '', '']
    expected_column_class_name: [java.lang.String, java.lang.String, java.lang.String,
                                 java.lang.String, java.lang.String, java.lang.String, java.lang.String]
    expected_column_label: [TABLE_CAT, TABLE_SCHEM, TABLE_NAME, GRANTOR, GRANTEE,
                            PRIVILEGE, IS_GRANTABLE]
    expected_column_display_size: [0, 0, 0, 0, 0, 0, 0]
    expected_precision: [0, 0, 0, 0, 0, 0, 0]
    expected_scale: [0, 0, 0, 0, 0, 0, 0]
    expected_schema_name: ['', '', '', '', '', '', '']
    expected_is_auto_increment: [false, false, false, false, false, false, false]
    expected_is_case_sensitive: [true, true, true, true, true, true, true]
    expected_is_currency: [false, false, false, false, false, false, false]
    expected_is_definitely_writable: [false, false, false, false, false, false, false]
    #skip_reason: "SQL-669: incorrect column nullability"
    #expected_is_nullable: [columnNoNulls, columnNullable, columnNullable, columnNoNulls, columnNoNulls, columnNoNulls, columnNullable]
    expected_is_read_only: [true, true, true, true, true, true, true]
    expected_is_searchable: [true, true, true, true, true, true, true]
    expected_is_signed: [false, false, false, false, false, false, false]
    expected_is_writable: [false, false, false, false, false, false, false]

  - description: getTablePrivileges_no_filters_returns_all_tables
    db: integration_test
    meta_function: [getTablePrivileges, null, null, '%']
    expected_result:
      - [db2, null, foo, null, '', SELECT, null]
      - [integration_test, null, a_non_lexicographic_field_order, null, '', SELECT,
         null]
      - [integration_test, null, any_collection, null, '', SELECT, null]
      - [integration_test, null, anyof_collection, null, '', SELECT, null]
      - [integration_test, null, b_non_lexicographic_field_order, null, '', SELECT,
         null]
      - [integration_test, null, bar, null, '', SELECT, null]
      - [integration_test, null, baz, null, '', SELECT, null]
      - [integration_test, null, class, null, '', SELECT, null]
      - [integration_test, null, foo, null, '', SELECT, null]
      - [integration_test, null, grades, null, '', SELECT, null]
      - [integration_test, null, null_and_missing, null, '', SELECT, null]
      - [integration_test, null, types_other, null, '', SELECT, null]
    row_count: 12
    ordered: true

  - description: getTablePrivileges_catalog_filter_only_returns_matching_tables
    db: integration_test
    meta_function: [getTablePrivileges, integration_test, null, '%']
    expected_result:
      - [integration_test, null, a_non_lexicographic_field_order, null, '', SELECT,
         null]
      - [integration_test, null, any_collection, null, '', SELECT, null]
      - [integration_test, null, anyof_collection, null, '', SELECT, null]
      - [integration_test, null, b_non_lexicographic_field_order, null, '', SELECT,
         null]
      - [integration_test, null, bar, null, '', SELECT, null]
      - [integration_test, null, baz, null, '', SELECT, null]
      - [integration_test, null, class, null, '', SELECT, null]
      - [integration_test, null, foo, null, '', SELECT, null]
      - [integration_test, null, grades, null, '', SELECT, null]
      - [ integration_test, null, null_and_missing, null, '', SELECT, null ]
      - [ integration_test, null, types_other, null, '', SELECT, null ]
    row_count: 11
    ordered: true

  - description: getTablePrivileges_catalog_and_table_filters_returns_matching_tables
    db: integration_test
    meta_function: [getTablePrivileges, integration_test, null, b%]
    expected_result:
      - [integration_test, null, b_non_lexicographic_field_order, null, '', SELECT,
         null]
      - [integration_test, null, bar, null, '', SELECT, null]
      - [integration_test, null, baz, null, '', SELECT, null]
    row_count: 3
    ordered: true

  # getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern)
  - description: getColumns_null_parameters_returns_all_columns
    db: integration_test
    meta_function: [ "getColumns", null, null, null, null ]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  - description: getColumns no filters returns all columns
    db: integration_test
    meta_function: ["getColumns", null, null, "%", "%"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  - description: getColumns catalog filter only returns all columns in database
    db: integration_test
    meta_function: ["getColumns", "integration_test", null, "%", "%"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  - description: getColumns catalog and table filters only returns matching columns
    db: integration_test
    meta_function: ["getColumns", "integration_test", null, "foo", "%"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  - description: getColumns catalog, table, and columns filters returns matching columns
    db: integration_test
    meta_function: ["getColumns", "integration_test", null, "b%", "_"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  # getColumnPrivileges(catalog, schemaPattern, tableNamePattern, columnNamePattern)
  - description: getColumnPrivileges no filters returns all columns
    db: integration_test
    meta_function: ["getColumnPrivileges", null, null, "%", "%"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  - description: getColumnPrivileges catalog filter only returns all columns in database
    db: integration_test
    meta_function: ["getColumnPrivileges", "integration_test", null, "%", "%"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  - description: getColumnPrivileges catalog and table filters only returns matching columns
    db: integration_test
    meta_function: ["getColumnPrivileges", "integration_test", null, "foo", "%"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"

  - description: getColumnPrivileges catalog, table, and columns filters returns matching columns
    db: integration_test
    meta_function: ["getColumnPrivileges", "integration_test", null, "b%", "_"]
    skip_reason: "SQL-668: fix MongoJsonSchema bsonType String/Array conflict"
