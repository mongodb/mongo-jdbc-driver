# This does not need to be kept in sync with sqlproxy, as it does not currently
# generate aggregation functions.
#
# This yml file has one top-level key, `functions`, whose value is a list of
# scalar function specs. Each scalar function spec can be configured with a
# number of fields:
#
# The `_id` field is a unique id for this scalar function, and used in all go
# identifiers generated for this function.
#
# The `description` field contains a short description of the function's behavior.
#
# The `mysql_doc_url` field contains a link to the mysql documentation for this
# function, if it exists.
#
# The `names` field contains a list of the names by which this scalar function
# may be called. For many functions there is only one name, but some scalar
# functions have synonyms.
#
# The `reconcile` field indicates that this function's generated should do
# something other than the default reconciliation behavior. If its value is
# `skip`, the generated `reconcile()` implementation will not modify its
# arguments. This is needed to replicate the existing behavior of some scalar
# functions, but should eventually be eliminated. If its value is `custom`, the
# generated `reconcile()` implementation will call a user-defined reconciliation
# function.
#
# The `separate_invocation_evaluation` field indicates whether a function with
# multiple invocations should delegate to the same evaluation function for all
# invocations, or a separate function per invocation. Currently, most scalar
# functions do the former, but we should strive to move towards the latter as
# this code is updated in the future.
#
# The `use_full_evaluation_state field indicates whether we need the full Evaluation
# state for Evaluation: context, evaluation config, execution state, and arguments,
# or, in the simpler case where we only need the sqlValueKind, collation, and arguments.
# If we need the full evaluation state, it is implied that no constant folding can occur
# beyond constant folding the arguments to the function. Examples of functions like this
# are connectionID and rand. In the case of rand, ConstantFolding would always be wrong.
#
# The `no_pushdown` field indicates that this scalar function cannot be pushed down.
#
# The `custom_fold_constants` field indicates that this function requires special
# normalization behavior, and should delegate to a user-supplied function in
# expr_functions_scalar_fold_constants.go.
#
# The `invocations` field contains a list of all the valid ways this scalar
# function can be invoked. Each invocation can contain a number of keys:
#
# The `id` field contains a string that will be appended to the function's id
# when generating go identifiers unique to this invocation. For scalar functions
# with only one invocation, this key should be omitted (and will default to the
# empty string).
#
# The `arguments` field contains a list of the arguments to this scalar
# function. Each argument must provide an `eval_type`, and may also provide a
# `name` (though the latter is strictly for clarity, and does not affect the
# generated code). The final argument to an invocation may also be marked as
# `variadic`.
#
# The `return_type` field indicates the EvalType returned by this scalar
# function. If this key is omitted, the EvalType will be determined by a
# user-supplied function in expr_functions_scalar_eval_type.go.
#

functions:
  - _id: avg
    description: returns the average of elements in a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['avg']

  - _id: count
    description: returns the count of elements in a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['count']

  - _id: sum
    description: returns the sum of elements in a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['sum']

  - _id: min
    description: returns the minimum element of elements in a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['min']

  - _id: max
    description: returns the maximum element of elements in a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['max']

  - _id: group_concat
    description: returns the concatenation of strings from a group into a single string with various options.
    invocations:
      - arguments:
          - eval_type: EvalString
        return_type: EvalString
    names: ['group_concat']

  - _id: std
    description: returns population standard deviation of a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['std']

  - _id: stddev_pop
    description: returns population standard deviation of a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['stddev_pop']

  - _id: stddev
    description: returns population standard deviation of a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['stddev']

  - _id: stddev_samp
    description: returns cumulative sample standard deviation of a group.
    invocations:
      - arguments:
          - eval_type: EvalNumber
        return_type: EvalNumber
    names: ['stddev_samp']


