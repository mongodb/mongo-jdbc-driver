apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
            artifact shadowJar
            artifact javadocJar
            artifact("$buildDir/"+thirdpartyNoticeDir+"/"+thirdpartyNoticeName) {
                classifier = 'license'
            }
            artifact("$rootDir/artifacts/ssdlc/mongodb-jdbc.sbom.json") {
                classifier = 'sbom'
            }

            pom {
                name = 'JDBC Driver'
                description = 'JDBC Driver for MongoDB Atlas SQL interface'
                url = 'https://github.com/mongodb/mongo-jdbc-driver'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        organization = 'MongoDB, Inc.'
                    }
                }
                scm {
                    url = 'https://github.com/mongodb/mongo-jdbc-driver'
                    connection = 'scm:git@github.com:mongodb/mongo-jdbc-driver.git'
                    developerConnection = 'scm:git@github.com:mongodb/mongo-jdbc-driver.git'
                }

                withXml {
                    // Clear the existing dependencies
                    def pomNode = asNode()
                    pomNode.remove(pomNode.dependencies)

                    // Add custom dependencies
                    def newDependenciesNode = asNode().appendNode('dependencies')
                    println("${configurations.runtimeClasspath.name} depedencies")
                    // Get the resolved configuration
                    // Collect direct dependencies
                    configurations.runtimeClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { resolvedDependency ->
                        resolvedDependency.moduleArtifacts.each { artifact ->
                            println " - ${artifact.moduleVersion.id.group}:${artifact.moduleVersion.id.name}:${artifact.moduleVersion.id.version}"
                            def dependencyNode = newDependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', artifact.moduleVersion.id.group)
                            dependencyNode.appendNode('artifactId', artifact.name)
                            dependencyNode.appendNode('version', artifact.moduleVersion.id.version)
                            dependencyNode.appendNode('scope', "runtime")
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    def nexusUrl = project.hasProperty('nexus_url') ? project.getProperty('nexus_url') : nexusDomain
    serverUrl "$nexusUrl/service/local/"
    username project.hasProperty('nexus_token_name') ? project.getProperty('nexus_token_name') : ""
    password project.hasProperty('nexus_token') ? project.getProperty('nexus_token') : ""
    packageGroup project.getGroup()
    stagingProfileId project.hasProperty('nexus_profile_id') ? project.getProperty('nexus_profile_id') : ''
    numberOfRetries 40
}

nexusPublishing {
    repositories {
        sonatype {
            def domain = project.hasProperty('nexus_url') ? project.getProperty('nexus_url') : nexusDomain
            nexusUrl = uri(nexusStaging.serverUrl)
            snapshotRepositoryUrl = uri("$domain/content/repositories/snapshots/")
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

afterEvaluate {
    signing {
        if (project.hasProperty('signing_key_id') && project.hasProperty('signing_password') && project.hasProperty('signing_secretKeyRingFile')) {
            sign publishing.publications.mavenJava
        }
    }
}

task listFirstLevelDependencies {
    doLast {
        println("First-level dependencies:")

        // For each configuration you are interested in, list the first-level dependencies
        configurations.all { configuration ->
            if (configuration.canBeResolved) {
                println("Configuration: ${configuration.name}")
                configuration.allDependencies.each { dependency ->
                    // Print only the first-level dependencies (declared in build.gradle)
                    println " - ${dependency.group}:${dependency.name}:${dependency.version}"
                }
            }
        }
    }
}

task listResolvedFirstLevelDependencies {
    doLast {
        println("Resolved first-level dependencies:")
        def configuration = configurations.runtimeClasspath
        if (configuration.canBeResolved) {
            println("Configuration: ${configuration.name}")
            // Get the resolved configuration
            def resolvedConfiguration = configuration.resolvedConfiguration
            // Collect direct dependencies
            resolvedConfiguration.firstLevelModuleDependencies.each { resolvedDependency ->
                resolvedDependency.moduleArtifacts.each { artifact ->
                    println " - ${artifact.moduleVersion.id.group}:${artifact.moduleVersion.id.name}:${artifact.moduleVersion.id.version}"
                }
            }
        }
    }
}



/*
For security we allow the signing-related project properties to be passed in as environment variables, which
Gradle enables if they are prefixed with "ORG_GRADLE_PROJECT_".  But since environment variables can not contain
the '.' character and the signing-related properties contain '.', here we map signing-related project properties with '_'
to ones with '.' that are expected by the signing plugin.
*/
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        if (project.hasProperty("signing_key_id")) {
            allprojects { ext."signing.keyId" = project.property("signing_key_id") }
        }
        if (project.hasProperty("signing_secretKeyRingFile")) {
            allprojects { ext."signing.secretKeyRingFile" = project.property("signing_secretKeyRingFile") }
        }
        if (project.hasProperty("signing_password")) {
            allprojects { ext."signing.password" = project.property("signing_password") }
        }
    }
}
